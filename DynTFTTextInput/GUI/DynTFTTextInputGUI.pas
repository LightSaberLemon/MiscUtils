//Generated by DynTFTCodeGen.


unit DynTFTTextInputGUI;

{$IFNDEF IsMCU}
  {$DEFINE IsDesktop}
{$ENDIF} 

{$IFDEF IsDesktop}
interface
{$ENDIF}

uses
  DynTFTTypes, DynTFTConsts, DynTFTUtils, DynTFTBaseDrawing,
  DynTFTTextInputGUIObjects, DynTFTTextInputHandlers,

//<DynTFTComponents>
  DynTFTButton,
  //DynTFTArrowButton,
  //DynTFTPanel,
  DynTFTCheckBox,
  //DynTFTScrollBar,
  //DynTFTItems,
  //DynTFTListBox,
  DynTFTLabel,
  //DynTFTRadioButton,
  //DynTFTRadioGroup,
  //DynTFTTabButton,
  //DynTFTPageControl,
  DynTFTEdit,
  DynTFTKeyButton,
  DynTFTVirtualKeyboard,
  //DynTFTComboBox,
  //DynTFTTrackBar,
  //DynTFTProgressBar,
  DynTFTMessageBox,
  //DynTFTVirtualTable,
  DynTFTVirtualKeyboardX2
//<EndOfDynTFTComponents> - Do not remove or modify this line!

  
  {$IFDEF IsDesktop}
    , SysUtils
    {$IFDEF DynTFTFontSupport}, DynTFTTextInputFonts {$ENDIF}
  {$ENDIF}

  {$I DynTFTGUIAdditionalUnits.inc}
  ;


procedure DynTFT_GUI_Start;
procedure DrawGUI; //Made available for debugging or various performance improvements. Called by DynTFT_GUI_Start.


implementation


// Project name: DynTFTTextInput.dyntftcg //Do not delete or modify this line!

procedure SetScreenActivity;
var
  i: Integer;
begin
  DynTFTAllComponentsContainer[0].Active := True;
  DynTFTAllComponentsContainer[1].Active := True;

  DynTFTAllComponentsContainer[0].ScreenColor := CL_DynTFTScreen_Background;
  DynTFTAllComponentsContainer[1].ScreenColor := CL_DynTFTScreen_Background;

  for i := 2 to CDynTFTMaxComponentsContainer - 1 do
    DynTFTAllComponentsContainer[i].Active := False;

  DynTFT_Set_Pen(DynTFTAllComponentsContainer[0].ScreenColor, 1);
  DynTFT_Set_Brush(1, DynTFTAllComponentsContainer[0].ScreenColor, 0, 0, 0, 0);
  DynTFT_Rectangle(0, 0, TFT_DISP_WIDTH, TFT_DISP_HEIGHT);  //These constans are declared in TFT.pas. This unit is no longer present by default, in the uses section. Instead, it has to be manually added in DynTFTGUIAdditionalUnits.inc. 
end;

procedure RegisterAllComponentsEvents;
begin
  DynTFTRegisterButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTButton type: ' + IntToStr(DynTFTGetButtonComponentType));{$ENDIF}
  //DynTFTRegisterArrowButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTArrowButton type: ' + IntToStr(DynTFTGetArrowButtonComponentType));{$ENDIF}
  //DynTFTRegisterPanelEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTPanel type: ' + IntToStr(DynTFTGetPanelComponentType));{$ENDIF}
  DynTFTRegisterCheckBoxEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTCheckBox type: ' + IntToStr(DynTFTGetCheckBoxComponentType));{$ENDIF}
  //DynTFTRegisterScrollBarEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTScrollBar type: ' + IntToStr(DynTFTGetScrollBarComponentType));{$ENDIF}
  //DynTFTRegisterItemsEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTItems type: ' + IntToStr(DynTFTGetItemsComponentType));{$ENDIF}
  //DynTFTRegisterListBoxEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTListBox type: ' + IntToStr(DynTFTGetListBoxComponentType));{$ENDIF}
  DynTFTRegisterLabelEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTLabel type: ' + IntToStr(DynTFTGetLabelComponentType));{$ENDIF}
  //DynTFTRegisterRadioButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTRadioButton type: ' + IntToStr(DynTFTGetRadioButtonComponentType));{$ENDIF}
  //DynTFTRegisterRadioGroupEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTRadioGroup type: ' + IntToStr(DynTFTGetRadioGroupComponentType));{$ENDIF}
  //DynTFTRegisterTabButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTTabButton type: ' + IntToStr(DynTFTGetTabButtonComponentType));{$ENDIF}
  //DynTFTRegisterPageControlEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTPageControl type: ' + IntToStr(DynTFTGetPageControlComponentType));{$ENDIF}
  DynTFTRegisterEditEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTEdit type: ' + IntToStr(DynTFTGetEditComponentType));{$ENDIF}
  DynTFTRegisterKeyButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTKeyButton type: ' + IntToStr(DynTFTGetKeyButtonComponentType));{$ENDIF}
  DynTFTRegisterVirtualKeyboardEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTVirtualKeyboard type: ' + IntToStr(DynTFTGetVirtualKeyboardComponentType));{$ENDIF}
  //DynTFTRegisterComboBoxEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTComboBox type: ' + IntToStr(DynTFTGetComboBoxComponentType));{$ENDIF}
  //DynTFTRegisterTrackBarEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTTrackBar type: ' + IntToStr(DynTFTGetTrackBarComponentType));{$ENDIF}
  //DynTFTRegisterProgressBarEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTProgressBar type: ' + IntToStr(DynTFTGetProgressBarComponentType));{$ENDIF}
  DynTFTRegisterMessageBoxEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTMessageBox type: ' + IntToStr(DynTFTGetMessageBoxComponentType));{$ENDIF}
  //DynTFTRegisterVirtualTableEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTVirtualTable type: ' + IntToStr(DynTFTGetVirtualTableComponentType));{$ENDIF}
  DynTFTRegisterVirtualKeyboardX2Events;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTVirtualKeyboardX2 type: ' + IntToStr(DynTFTGetVirtualKeyboardX2ComponentType));{$ENDIF}
end;

procedure CreateGUI_Screen_0; //Screen
begin
  btnLoad := DynTFTButton_Create(0, 8, 412, 115, 26);
  btnLoad^.Caption := 'Load';
  {$IFDEF DynTFTFontSupport} 
    btnLoad^.ActiveFont := {$IFDEF IsDesktop} PByte(@CAllFontSettings[0]) {$ELSE} @Tahoma8 {$ENDIF};
  {$ENDIF} 
  {$IFDEF MouseClickSupport} 
    {$IFDEF IsDesktop}
      btnLoad^.BaseProps.OnClickUser^ := btnLoad_OnClickUser;
    {$ELSE}
      btnLoad^.BaseProps.OnClickUser := @btnLoad_OnClickUser;
    {$ENDIF}
  {$ENDIF} 

  btnUnload := DynTFTButton_Create(0, 8, 446, 115, 26);
  btnUnload^.BaseProps.Enabled := 0;
  btnUnload^.Caption := 'Unload';
  {$IFDEF DynTFTFontSupport} 
    btnUnload^.ActiveFont := {$IFDEF IsDesktop} PByte(@CAllFontSettings[0]) {$ELSE} @Tahoma8 {$ENDIF};
  {$ENDIF} 
  {$IFDEF MouseClickSupport} 
    {$IFDEF IsDesktop}
      btnUnload^.BaseProps.OnClickUser^ := btnUnload_OnClickUser;
    {$ELSE}
      btnUnload^.BaseProps.OnClickUser := @btnUnload_OnClickUser;
    {$ENDIF}
  {$ENDIF} 

  btnCreateKeyboard := DynTFTButton_Create(0, 670, 88, 100, 26);
  btnCreateKeyboard^.Caption := 'Create Keyboard';
  {$IFDEF DynTFTFontSupport} 
    btnCreateKeyboard^.ActiveFont := {$IFDEF IsDesktop} PByte(@CAllFontSettings[0]) {$ELSE} @Tahoma8 {$ENDIF};
  {$ENDIF} 
  {$IFDEF MouseClickSupport} 
    {$IFDEF IsDesktop}
      btnCreateKeyboard^.BaseProps.OnClickUser^ := btnCreateKeyboard_OnClickUser;
    {$ELSE}
      btnCreateKeyboard^.BaseProps.OnClickUser := @btnCreateKeyboard_OnClickUser;
    {$ENDIF}
  {$ENDIF} 

  chkPass := DynTFTCheckBox_Create(0, 670, 63, 100, 20);
  chkPass^.Caption := 'Password Char';
  {$IFDEF DynTFTFontSupport} 
    chkPass^.ActiveFont := {$IFDEF IsDesktop} PByte(@CAllFontSettings[0]) {$ELSE} @Tahoma8 {$ENDIF};
  {$ENDIF} 
  chkPass^.Checked := True;
  {$IFDEF MouseClickSupport} 
    {$IFDEF IsDesktop}
      chkPass^.BaseProps.OnClickUser^ := chkPass_OnClickUser;
    {$ELSE}
      chkPass^.BaseProps.OnClickUser := @chkPass_OnClickUser;
    {$ENDIF}
  {$ENDIF} 

  chkVKX2 := DynTFTCheckBox_Create(0, 670, 24, 46, 20);
  chkVKX2^.Caption := 'X2';
  {$IFDEF DynTFTFontSupport} 
    chkVKX2^.ActiveFont := {$IFDEF IsDesktop} PByte(@CAllFontSettings[0]) {$ELSE} @Tahoma8 {$ENDIF};
  {$ENDIF} 
  {$IFDEF MouseClickSupport} 
    {$IFDEF IsDesktop}
      chkVKX2^.BaseProps.OnClickUser^ := chkVKX2_OnClickUser;
    {$ELSE}
      chkVKX2^.BaseProps.OnClickUser := @chkVKX2_OnClickUser;
    {$ENDIF}
  {$ENDIF} 

  edtInput := DynTFTEdit_Create(0, 8, 378, 179, 26);
  edtInput^.Text := 'some input';
  {$IFDEF DynTFTFontSupport} 
    edtInput^.ActiveFont := {$IFDEF IsDesktop} PByte(@CAllFontSettings[0]) {$ELSE} @Tahoma8 {$ENDIF};
  {$ENDIF} 
  edtInput^.PasswordText := True;
  {$IFDEF IsDesktop}
    edtInput^.BaseProps.OnMouseDownUser^ := edtInput_OnMouseDownUser;
  {$ELSE}
    edtInput^.BaseProps.OnMouseDownUser := @edtInput_OnMouseDownUser;
  {$ENDIF}

  edtData1 := DynTFTEdit_Create(0, 459, 397, 115, 20);
  edtData1^.BaseProps.Enabled := 0;
  edtData1^.Text := 'data 1';
  {$IFDEF DynTFTFontSupport} 
    edtData1^.ActiveFont := {$IFDEF IsDesktop} PByte(@CAllFontSettings[0]) {$ELSE} @Tahoma8 {$ENDIF};
  {$ENDIF} 
  {$IFDEF IsDesktop}
    edtData1^.BaseProps.OnMouseDownUser^ := edtData1_OnMouseDownUser;
  {$ELSE}
    edtData1^.BaseProps.OnMouseDownUser := @edtData1_OnMouseDownUser;
  {$ENDIF}

  edtData2 := DynTFTEdit_Create(0, 459, 452, 115, 20);
  edtData2^.BaseProps.Enabled := 0;
  edtData2^.Text := 'Data 2';
  {$IFDEF DynTFTFontSupport} 
    edtData2^.ActiveFont := {$IFDEF IsDesktop} PByte(@CAllFontSettings[0]) {$ELSE} @Tahoma8 {$ENDIF};
  {$ENDIF} 
  {$IFDEF IsDesktop}
    edtData2^.BaseProps.OnMouseDownUser^ := edtData2_OnMouseDownUser;
  {$ELSE}
    edtData2^.BaseProps.OnMouseDownUser := @edtData2_OnMouseDownUser;
  {$ENDIF}

  lblData1 := DynTFTLabel_Create(0, 459, 378, 49, 17);
  lblData1^.Caption := 'Data 1';
  lblData1^.Color := CL_DynTFTRadioButton_Background;
  {$IFDEF DynTFTFontSupport} 
    lblData1^.ActiveFont := {$IFDEF IsDesktop} PByte(@CAllFontSettings[0]) {$ELSE} @Tahoma8 {$ENDIF};
  {$ENDIF} 

  lblData2 := DynTFTLabel_Create(0, 459, 433, 49, 17);
  lblData2^.Caption := 'Data 2';
  lblData2^.Color := CL_DynTFTRadioButton_Background;
  {$IFDEF DynTFTFontSupport} 
    lblData2^.ActiveFont := {$IFDEF IsDesktop} PByte(@CAllFontSettings[0]) {$ELSE} @Tahoma8 {$ENDIF};
  {$ENDIF} 
end;

procedure CreateGUI_Screen_1; //Dyn comp
begin
end;

procedure DrawGUI;
begin
  CreateGUI_Screen_0;
  CreateGUI_Screen_1;
  DynTFTRepaintScreenComponents(0, CREPAINTONSTARTUP, nil);
  DynTFTRepaintScreenComponents(1, CREPAINTONSTARTUP, nil);
end;


{$IFDEF IsDesktop}
  {$IFDEF RTTIREG}
    procedure InitAllBinGUIObjectsToNil;
    var
      i: Integer;
    begin
      //No binary components
    end;
  {$ENDIF}
{$ENDIF}

  {$IFDEF RTTIREG}
    function CheckIntegerAndPointerSize: Boolean;  // returs True for success
    {$IFDEF IsMCU}
      type
        Pointer = ^Integer;
    {$ENDIF}
    begin
      if SizeOf(Integer) <> C_ProfileIntegerSize then
      begin
        DynTFTDisplayErrorMessage(CRTTIBADINTEGERSIZE, CL_BLUE);
        {$IFDEF IsDesktop} DynTFT_DebugConsole('.................................... ' + CRTTIBADINTEGERSIZE + ' ...  SizeOf(Integer) <> ' + IntToStr(C_ProfileIntegerSize) + '  See profile settings.'); {$ENDIF}
        Result := False;
        Exit;
      end;

      if SizeOf(Pointer) <> C_ProfilePointerSize then
      begin
        DynTFTDisplayErrorMessage(CRTTIBADIPOINTERSIZE, CL_BLUE);
        {$IFDEF IsDesktop} DynTFT_DebugConsole('.................................... ' + CRTTIBADIPOINTERSIZE + ' ...  SizeOf(Pointer) <> ' + IntToStr(C_ProfilePointerSize) + '  See profile settings.'); {$ENDIF}
        Result := False;
        Exit;
      end;

      Result := True;
    end;
  {$ENDIF}


procedure DynTFT_GUI_Start;
begin
  {$IFDEF IsDesktop}
    DynTFT_DebugConsole('Entering DynTFT_GUI_Start');

    {$IFDEF RTTIREG}
      InitAllBinGUIObjectsToNil;
    {$ENDIF}
  {$ENDIF}

  {$IFDEF RTTIREG}
    LinkHandlers;
  {$ENDIF}

  DynTFTInitInputDevStateFlags;

  DynTFTInitComponentTypeRegistration;
  DynTFTInitComponentContainers;    //must be called after InitComponentTypeRegistration
  RegisterAllComponentsEvents;

  SetScreenActivity;

  {$IFDEF RTTIREG}
    if not CheckIntegerAndPointerSize then
      Exit;
  {$ENDIF}

  DrawGUI;
end;

end.
