//Generated by DynTFTCodeGen.


unit DynTFTTextInputHandlers;

{$IFNDEF IsMCU}
  {$DEFINE IsDesktop}
{$ENDIF}

{$IFDEF IsDesktop}
interface
{$ENDIF}

uses
  {$IFDEF UseSmallMM}
    DynTFTSmallMM,
  {$ELSE}
    {$IFDEF IsDesktop}
      MemManager,
    {$ENDIF}
  {$ENDIF} //this must be the first unit, at least in Delphi, because it exports GetMem.
  
  DynTFTTypes, DynTFTConsts, DynTFTUtils, DynTFTBaseDrawing, DynTFTControls,
  DynTFTTextInputGUIObjects,

//<DynTFTComponents>
  DynTFTButton,
  //DynTFTArrowButton,
  //DynTFTPanel,
  DynTFTCheckBox,
  //DynTFTScrollBar,
  //DynTFTItems,
  //DynTFTListBox,
  DynTFTLabel,
  //DynTFTRadioButton,
  //DynTFTRadioGroup,
  //DynTFTTabButton,
  //DynTFTPageControl,
  DynTFTEdit,
  DynTFTKeyButton,
  DynTFTVirtualKeyboard,
  //DynTFTComboBox,
  //DynTFTTrackBar,
  //DynTFTProgressBar,
  DynTFTMessageBox,
  //DynTFTVirtualTable,
  DynTFTVirtualKeyboardX2
//<EndOfDynTFTComponents> - Do not remove or modify this line!


  {$IFDEF IsDesktop}
    ,SysUtils, Forms
    {$IFDEF DynTFTFontSupport}, DynTFTTextInputFonts {$ENDIF}
  {$ENDIF}

  {$IFNDEF UserTFTCommands}
    {$IFDEF IsDesktop} , TFT {$ENDIF}
  {$ELSE}
    , {$I UserDrawingUnits.inc}
  {$ENDIF}

  {$I DynTFTHandlersAdditionalUnits.inc}
  ;

  {$IFDEF UseHandlersAdditionalCodeInInterface}
    {$I DynTFTHandlersAdditionalCodeInInterface.inc} //Can be used to specify external functions, vars, consts
  {$ENDIF}


// Project name: DynTFTTextInput.dyntftcg //Do not delete or modify this line!

//  Do not modify lines, which are marked with "//CodegenSym"! They are required for proper editing of this file.

//CodegenSym:GroupsBegin
//CodegenSym:GroupsEnd

procedure btnLoad_OnClickUser(Sender: PPtrRec); //CodegenSym:header
procedure btnUnload_OnClickUser(Sender: PPtrRec); //CodegenSym:header
procedure btnCreateKeyboard_OnClickUser(Sender: PPtrRec); //CodegenSym:header
procedure chkPass_OnClickUser(Sender: PPtrRec); //CodegenSym:header
procedure chkVKX2_OnClickUser(Sender: PPtrRec); //CodegenSym:header
procedure edtInput_OnMouseDownUser(Sender: PPtrRec); //CodegenSym:header
procedure edtData1_OnMouseDownUser(Sender: PPtrRec); //CodegenSym:header
procedure edtData2_OnMouseDownUser(Sender: PPtrRec); //CodegenSym:header

//CodegenSym:AllBinHandlersBegin

{$IFDEF RTTIREG}

      var
        AllBinHandlersStr: array[0..0] of string;  // No handlers found. Using a dummy entry.
        AllBinHandlersAddresses: array[0..0] of TPtr;  // No handlers found. Using a dummy entry.

        AllBinIdentifiersStr: array[0..0] of string;  // No identifiers found. Using a dummy entry.
        AllBinIdentifiersAddresses: array[0..0] of TPtr;  // No identifiers found. Using a dummy entry.

      procedure UpdateAllBinHandlerStrArray;
{$ENDIF} // RTTIREG

//CodegenSym:AllBinHandlersEnd

implementation

{$I DynTFTHandlersAdditionalCode.inc}

//CodegenSym:UpdateBinHandlersProcBegin
{$IFDEF RTTIREG}

      procedure UpdateAllBinHandlerStrArray;
      begin
        // Desktop profile not found. No handler names are available.
      end;
{$ENDIF} // RTTIREG

//CodegenSym:UpdateBinHandlersProcEnd

//CodegenSym:CreationGroups

//CodegenSym:HandlersImplementation

procedure btnLoad_OnClickUser(Sender: PPtrRec); //CodegenSym:handler
var
  Msg, Title: string;
begin //CodegenSym:handler:begin
  if True then //if DoOnLoad('Load') then
  begin
    DynTFTDisableComponent(PDynTFTBaseComponent(TPtrRec(btnLoad)));
    DynTFTEnableComponent(PDynTFTBaseComponent(TPtrRec(btnUnload)));
  end
  else
  begin
    Msg := 'Error loading.';
    Title := Application.MainForm.Caption;
    DynTFTShowMessageBox(1, Msg, Title, CDynTFT_MB_OK);
  end;
end; //CodegenSym:handler:end


procedure btnUnload_OnClickUser(Sender: PPtrRec); //CodegenSym:handler
begin //CodegenSym:handler:begin
  //DoOnUnload('Unload');
  DynTFTEnableComponent(PDynTFTBaseComponent(TPtrRec(btnLoad)));
  DynTFTDisableComponent(PDynTFTBaseComponent(TPtrRec(btnUnload)));
end; //CodegenSym:handler:end


procedure btnCreateKeyboard_OnClickUser(Sender: PPtrRec); //CodegenSym:handler
var
  ATestButton: PDynTFTButton;
begin //CodegenSym:handler:begin
  PDynTFTBaseComponent(TPtrRec(Sender))^.BaseProps.Focused := CREJECTFOCUS;
  DynTFTDisableComponent(PDynTFTBaseComponent(TPtrRec(Sender)));
  DynTFT_DebugConsole('Creating keyboard..');

  Randomize;

  if not chkVKX2^.Checked then
  begin
    AVirtualKeyboard := DynTFTVirtualKeyboard_Create(1, 5 + Random(20), 1, 318, 182);
    DynTFTShowComponent(PDynTFTBaseComponent(TPtrRec(AVirtualKeyboard)));

    {$IFDEF IsDesktop}
      AVirtualKeyboard^.OnCharKey^ := VirtualKeyboard_OnCharKey;
      AVirtualKeyboard^.OnSpecialKey^ := VirtualKeyboard_OnSpecialKey;
    {$ELSE}
      AVirtualKeyboard^.OnCharKey := @VirtualKeyboard_OnCharKey;
      AVirtualKeyboard^.OnSpecialKey := @VirtualKeyboard_OnSpecialKey;
    {$ENDIF}
  end
  else
  begin
    AVirtualKeyboardX2 := DynTFTVirtualKeyboardX2_Create(1, 5 + Random(20), 1, 318 shl 1, 182 shl 1);
    DynTFTShowComponent(PDynTFTBaseComponent(TPtrRec(AVirtualKeyboardX2)));

    {$IFDEF IsDesktop}
      AVirtualKeyboardX2^.OnCharKey^ := VirtualKeyboardX2_OnCharKey;
      AVirtualKeyboardX2^.OnSpecialKey^ := VirtualKeyboard_OnSpecialKey;
    {$ELSE}
      AVirtualKeyboardX2^.OnCharKey := @VirtualKeyboardX2_OnCharKey;
      AVirtualKeyboardX2^.OnSpecialKey := @VirtualKeyboard_OnSpecialKey;
    {$ENDIF}
  end;

  ATestButton := DynTFTButton_Create(1, {550} btnCreateKeyboard^.BaseProps.Left, 130, btnCreateKeyboard^.BaseProps.Width, 20);
  ATestButton^.Caption := 'Destroy Keyboard';
  {$IFDEF IsDesktop}
    ATestButton^.BaseProps.OnMouseUpUser^ := btnDestroyKeyButtons_OnClickUser;
  {$ELSE}
    ATestButton^.BaseProps.OnMouseUpUser := @btnDestroyKeyButtons_OnClickUser;
  {$ENDIF}
  ATestButton^.ActiveFont :=  {$IFDEF IsDesktop} PByte(@CAllFontSettings[0]) {$ELSE} @Tahoma8 {$ENDIF};
  ATestButton^.BaseProps.Focused := CREJECTFOCUS;

  DynTFTShowComponent(PDynTFTBaseComponent(TPtrRec(ATestButton)));
  DynTFTDisableComponent(PDynTFTBaseComponent(TPtrRec(btnCreateKeyboard)));

  DynTFTDisableComponent(PDynTFTBaseComponent(TPtrRec(chkVKX2)));

  if edtData1.BaseProps.Enabled = 0 then
  begin
    CurrentEditBox := edtInput; //init on first keyboard creation
    DynTFTEnableComponent(PDynTFTBaseComponent(TPtrRec(edtData1)));
    DynTFTEnableComponent(PDynTFTBaseComponent(TPtrRec(edtData2)));
    DynTFTFocusComponent(PDynTFTBaseComponent(TPtrRec(CurrentEditBox)));
    DynTFTFocusComponent(PDynTFTBaseComponent(TPtrRec(CurrentEditBox)));
  end;

  DynTFT_DebugConsole('Done creating keyboard..');
end; //CodegenSym:handler:end


procedure chkPass_OnClickUser(Sender: PPtrRec); //CodegenSym:handler
begin //CodegenSym:handler:begin
  edtInput^.PasswordText := PDynTFTCheckBox(TPtrRec(Sender))^.Checked;
  DynTFTEditAfterTypingText(edtInput);
  //also, set the other editboxes if required
end; //CodegenSym:handler:end


procedure chkVKX2_OnClickUser(Sender: PPtrRec); //CodegenSym:handler
begin //CodegenSym:handler:begin
  //
end; //CodegenSym:handler:end


procedure edtInput_OnMouseDownUser(Sender: PPtrRec); //CodegenSym:handler
begin //CodegenSym:handler:begin
  DynTFTFocusComponent(PDynTFTBaseComponent(TPtrRec(Sender)));
  CurrentEditBox := PDynTFTEdit(Sender);
end; //CodegenSym:handler:end


procedure edtData1_OnMouseDownUser(Sender: PPtrRec); //CodegenSym:handler
begin //CodegenSym:handler:begin
  DynTFTFocusComponent(PDynTFTBaseComponent(TPtrRec(Sender)));
  CurrentEditBox := PDynTFTEdit(Sender);
end; //CodegenSym:handler:end


procedure edtData2_OnMouseDownUser(Sender: PPtrRec); //CodegenSym:handler
begin //CodegenSym:handler:begin
  DynTFTFocusComponent(PDynTFTBaseComponent(TPtrRec(Sender)));
  CurrentEditBox := PDynTFTEdit(Sender);
end; //CodegenSym:handler:end


end.
