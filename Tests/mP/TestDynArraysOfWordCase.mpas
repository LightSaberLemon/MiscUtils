{
    Copyright (C) 2024 VCC
    creation date: 19 Apr 2024
    initial release date: 19 Apr 2024

    author: VCC
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

unit TestDynArraysOfWordCase;

uses
  DynArrays, Expectations, TestUtilsMik;

type
  TTestDynArraysOfWordCase = record
    SetUp: PTestProc;
    TearDown: PTestProc;
    Tests: TNamedTestProcArr;
    TestCount: Integer;
  end;


procedure TTestDynArraysOfWordCase_RunTests;
procedure RegisterTTestDynArraysOfWordCaseProcs;


implementation


var
  TestDynArraysOfWordCase: TTestDynArraysOfWordCase;


procedure TTestDynArraysOfWordCase_RunTests;
var
  i, TestCountM1: Integer;
  TestName: string[80];
begin
  RegisterTTestDynArraysOfWordCaseProcs;

  TestCountM1 := TestDynArraysOfWordCase.TestCount - 1;

  for i := 0 to TestCountM1 do
  begin
    UART_WriteLn_Text('SetUp_TTestDynArraysOfWordCase');
    TestDynArraysOfWordCase.SetUp();

    TestName := 'RunTest_';
    strcat(TestName, TestDynArraysOfWordCase.Tests[i].Name);
    UART_WriteLn_Text(TestName);

    TestDynArraysOfWordCase.Tests[i].TestProc();

    UART_WriteLn_Text('TearDown_TTestDynArraysOfWordCase');
    TestDynArraysOfWordCase.TearDown();
    UART_WriteLn_Text('_');
  end;
end;


procedure TTestDynArraysOfWordCase_SetUp;
begin
  MM_Init;
end;


procedure TTestDynArraysOfWordCase_TearDown;
begin
  //nothing so far
end;


procedure TTestDynArraysOfWordCase_TestSimpleAllocation;
var
  Arr: TDynArrayOfWord;
  AllocationResult: Boolean;
begin
  InitDynArrayOfWordToEmpty(Arr);  //this is what Delphi and FP do automatically

  AllocationResult := SetDynOfWordLength(Arr, 7);
  //try
    ExpectBoolean(AllocationResult).ToBe(True, 'Expected a successful allocation.');
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), '');
    ExpectDWord(Arr.Len).ToBe(7, '');
  //finally
    FreeDynArrayOfWord(Arr);  //the array has to be manually freed, because there is no reference counting
  //end;
end;


procedure TTestDynArraysOfWordCase_TestWritingToArray;
var
  Arr: TDynArrayOfWord;
begin
  InitDynArrayOfWordToEmpty(Arr);
  SetDynOfWordLength(Arr, 20);
  //try
    Arr.Content^[17] := 80;
    ExpectDWord(Arr.Content^[17]).ToBe(80, '');
  //finally
    FreeDynArrayOfWord(Arr);
  //end;
end;


procedure TTestDynArraysOfWordCase_TestReallocationToLargerArray;
var
  Arr: TDynArrayOfWord;
  i: Integer;
begin
  InitDynArrayOfWordToEmpty(Arr);
  ExpectBoolean(SetDynOfWordLength(Arr, 20)).ToBe(True, '');

  for i := 0 to DynOfWordLength(Arr) - 1 do
    Arr.Content^[i] := i * 10;

  ExpectBoolean(SetDynOfWordLength(Arr, 30)).ToBe(True, 'expecting successful reallocation');
  //try
    for i := 0 to 20 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr.Content^[i]).ToBe(DWord(i * 10), '');
  //finally
    FreeDynArrayOfWord(Arr);
  //end;
end;


procedure TTestDynArraysOfWordCase_TestReallocationToSmallerArray;
var
  Arr: TDynArrayOfWord;
  i: Integer;
begin
  InitDynArrayOfWordToEmpty(Arr);
  SetDynOfWordLength(Arr, 20);

  for i := 0 to DynOfWordLength(Arr) - 1 do
    Arr.Content^[i] := i * 10;

  SetDynOfWordLength(Arr, 10);
  //try
    for i := 0 to 10 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr.Content^[i]).ToBe(DWord(i * 10), '');
  //finally
    FreeDynArrayOfWord(Arr);
  //end;
end;


procedure TTestDynArraysOfWordCase_TestConcatDynArrays_HappyFlow;
var
  Arr1, Arr2: TDynArrayOfWord;
  AllocationResult: Boolean;
  i: Integer;
begin
  InitDynArrayOfWordToEmpty(Arr1);
  InitDynArrayOfWordToEmpty(Arr2);

  //try
    AllocationResult := SetDynOfWordLength(Arr1, 20);
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'Allocation_20 should succeed.');
    for i := 0 to DynOfWordLength(Arr1) - 1 do
      Arr1.Content^[i] := 1234 + i * 10;
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'First allocation Result is overwritten.');

    AllocationResult := SetDynOfWordLength(Arr2, 15);
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'Allocation_15 should succeed.');
    for i := 0 to DynOfWordLength(Arr2) - 1 do
      Arr2.Content^[i] := 1234 + i * 10;
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'Second allocation Result is overwritten.');

    AllocationResult := ConcatDynArraysOfWord(Arr1, Arr2);

    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'Concat Result is overwritten or memory is full.');
    ExpectBoolean(AllocationResult).ToBe(True, '');
    ExpectDWord(Arr1.Len).ToBe(35, '');

    for i := 0 to 20 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr1.Content^[i]).ToBe(DWord(1234 + i * 10), '');

    for i := 20 to 35 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr1.Content^[i]).ToBe(DWord(1234 + (i - 20) * 10), '');
  //finally
    FreeDynArrayOfWord(Arr1);
    FreeDynArrayOfWord(Arr2);
  //end;
end;


procedure TTestDynArraysOfWordCase_TestConcatDynArray_WithEmpty;
var
  Arr1, Arr2: TDynArrayOfWord;
  AllocationResult: Boolean;
  i: Integer;
begin
  InitDynArrayOfWordToEmpty(Arr1);
  InitDynArrayOfWordToEmpty(Arr2);

  //try
    AllocationResult := SetDynOfWordLength(Arr1, 20);
    for i := 0 to DynOfWordLength(Arr1) - 1 do
      Arr1.Content^[i] := i * 10;

    AllocationResult := ConcatDynArraysOfWord(Arr1, Arr2);
    ExpectBoolean(AllocationResult).ToBe(True, '');
    ExpectDWord(Arr1.Len).ToBe(20, '');

    for i := 0 to 20 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr1.Content^[i]).ToBe(DWord(i * 10), '');
  //finally
    FreeDynArrayOfWord(Arr1);
    FreeDynArrayOfWord(Arr2);
  //end;
end;


procedure TTestDynArraysOfWordCase_TestConcatEmptyDynArray_WithValid;
var
  Arr1, Arr2: TDynArrayOfWord;
  AllocationResult: Boolean;
  i: Integer;
begin
  InitDynArrayOfWordToEmpty(Arr1);
  InitDynArrayOfWordToEmpty(Arr2);

  //try
    AllocationResult := SetDynOfWordLength(Arr2, 15);
    for i := 0 to DynOfWordLength(Arr2) - 1 do
      Arr2.Content^[i] := i * 10;

    AllocationResult := ConcatDynArraysOfWord(Arr1, Arr2);
    ExpectBoolean(AllocationResult).ToBe(True, '');
    ExpectDWord(Arr1.Len).ToBe(15, '');

    for i := 0 to 15 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr1.Content^[i]).ToBe(DWord(i * 10), '');
  //finally
    FreeDynArrayOfWord(Arr1);
    FreeDynArrayOfWord(Arr2);
  //end;
end;


procedure TTestDynArraysOfWordCase_TestConcatEmptyDynArray_WithEmpty;
var
  Arr1, Arr2: TDynArrayOfWord;
  AllocationResult: Boolean;
begin
  InitDynArrayOfWordToEmpty(Arr1);
  InitDynArrayOfWordToEmpty(Arr2);

  //try
    AllocationResult := ConcatDynArraysOfWord(Arr1, Arr2);
    ExpectBoolean(AllocationResult).ToBe(True, '');
    ExpectDWord(Arr1.Len).ToBe(0, '');
  //finally
    FreeDynArrayOfWord(Arr1);
    FreeDynArrayOfWord(Arr2);
  //end;
end;


procedure TTestDynArraysOfWordCase_Test_CallDynLength_WithoutInitDynArray;
var
  Arr: TDynArrayOfWord;
begin
  //try
  //  DynOfWordLength(Arr);
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe(CUninitializedDynArrayErrMsg);
  //end;
end;


procedure TTestDynArraysOfWordCase_Test_CallSetDynLength_WithoutInitDynArray;
var
  Arr: TDynArrayOfWord;
begin
  //try
  //  SetDynOfWordLength(Arr, 3);
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe(CUninitializedDynArrayErrMsg);
  //end;
end;


procedure TTestDynArraysOfWordCase_Test_CallConcatDynArrays_WithoutFirstInitDynArray;
var
  Arr1, Arr2: TDynArrayOfWord;
begin
  InitDynArrayOfWordToEmpty(Arr2);
  SetDynOfWordLength(Arr2, 3);

  //try
  //  ConcatDynArraysOfWord(Arr1, Arr2);
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe(CUninitializedDynArrayErrMsg);
  //end;

  FreeDynArrayOfWord(Arr2);
end;


procedure TTestDynArraysOfWordCase_Test_CallConcatDynArrays_WithoutSecondInitDynArray;
var
  Arr1, Arr2: TDynArrayOfWord;
begin
  InitDynArrayOfWordToEmpty(Arr1);
  SetDynOfWordLength(Arr1, 3);

  //try
  //  ConcatDynArraysOfWord(Arr1, Arr2);
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe(CUninitializedDynArrayErrMsg);
  //end;

  FreeDynArrayOfWord(Arr1);
end;


procedure TTestDynArraysOfWordCase_TestDeleteFirstWords_ZeroLength;
var
  Arr: TDynArrayOfWord;
begin
  InitDynArrayOfWordToEmpty(Arr);
  SetDynOfWordLength(Arr, 3);
  Arr.Content^[0] := 30;
  Arr.Content^[1] := 40;
  Arr.Content^[2] := 50;

  RemoveStartWordsFromDynArray(0, Arr);

  ExpectDWord(Arr.Len).ToBe(3, '');
  ExpectDWord(Arr.Content^[0]).ToBe(30, '');
  ExpectDWord(Arr.Content^[1]).ToBe(40, '');
  ExpectDWord(Arr.Content^[2]).ToBe(50, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestDeleteFirstWords_LessThanLength;
var
  Arr: TDynArrayOfWord;
begin
  InitDynArrayOfWordToEmpty(Arr);
  SetDynOfWordLength(Arr, 3);
  Arr.Content^[0] := 30;
  Arr.Content^[1] := 40;
  Arr.Content^[2] := 50;

  RemoveStartWordsFromDynArray(2, Arr);

  ExpectDWord(Arr.Len).ToBe(1, '');
  ExpectDWord(Arr.Content^[0]).ToBe(50, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestDeleteFirstWords_LessThanLength_MoreItems;
var
  Arr: TDynArrayOfWord;
begin
  InitDynArrayOfWordToEmpty(Arr);
  SetDynOfWordLength(Arr, 8);
  Arr.Content^[0] := 2030;
  Arr.Content^[1] := 2040;
  Arr.Content^[2] := 2050;
  Arr.Content^[3] := 2060;
  Arr.Content^[4] := 2070;
  Arr.Content^[5] := 2080;
  Arr.Content^[6] := 2090;
  Arr.Content^[7] := 20100;

  RemoveStartWordsFromDynArray(2, Arr);

  ExpectDWord(Arr.Len).ToBe(6, '');
  ExpectDWord(Arr.Content^[0]).ToBe(2050, '');
  ExpectDWord(Arr.Content^[1]).ToBe(2060, '');
  ExpectDWord(Arr.Content^[2]).ToBe(2070, '');
  ExpectDWord(Arr.Content^[3]).ToBe(2080, '');
  ExpectDWord(Arr.Content^[4]).ToBe(2090, '');
  ExpectDWord(Arr.Content^[5]).ToBe(20100, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestDeleteFirstWords_SameAsLength;
var
  Arr: TDynArrayOfWord;
begin
  InitDynArrayOfWordToEmpty(Arr);
  SetDynOfWordLength(Arr, 3);
  Arr.Content^[0] := 30;
  Arr.Content^[1] := 40;
  Arr.Content^[2] := 50;

  RemoveStartWordsFromDynArray(3, Arr);

  ExpectDWord(Arr.Len).ToBe(0, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestDeleteFirstWords_GreaterThanLength;
var
  Arr: TDynArrayOfWord;
begin
  InitDynArrayOfWordToEmpty(Arr);
  SetDynOfWordLength(Arr, 3);
  RemoveStartWordsFromDynArray(7, Arr);

  ExpectDWord(Arr.Len).ToBe(0, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestCopyFromDynArray_HappyFlow;
var
  Src, Dest: TDynArrayOfWord;
  s: string[20];
begin
  InitDynArrayOfWordToEmpty(Src);
  ExpectBoolean(StringToDynArrayOfWord('0123456789ABCDEFGHIJKL', Src)).ToBe(True, '');
  CopyFromDynArrayOfWord(Dest, Src, 3, 7);

  DynArrayOfWordToString(Dest, s);
  ExpectString(s).ToBe('6789ABCDEFGHIJ', '');
  FreeDynArrayOfWord(Src);
  FreeDynArrayOfWord(Dest);
end;


procedure TTestDynArraysOfWordCase_TestCopyFromDynArray_0Length;
var
  Src, Dest: TDynArrayOfWord;
  s: string[20];
begin
  InitDynArrayOfWordToEmpty(Src);
  ExpectBoolean(StringToDynArrayOfWord('0123456789ABCDEF', Src)).ToBe(True, '');
  CopyFromDynArrayOfWord(Dest, Src, 3, 0);

  DynArrayOfWordToString(Dest, s);
  ExpectString(s).ToBe('', '');
  FreeDynArrayOfWord(Src);
  FreeDynArrayOfWord(Dest);
end;


procedure TTestDynArraysOfWordCase_TestCopyFromDynArray_PartialOutOfContent;
var
  Src, Dest: TDynArrayOfWord;
  s: string[20];
begin
  InitDynArrayOfWordToEmpty(Src);
  ExpectBoolean(StringToDynArrayOfWord('0123456789ABCDEF', Src)).ToBe(True, '');
  CopyFromDynArrayOfWord(Dest, Src, 5, 20);
  ExpectDWord(Dest.Len).ToBe(3, ''); //  CopyFromDynArrayOfWord doesn't care about the content.

  DynArrayOfWordToString(Dest, s);
  ExpectString(s).ToBe('ABCDEF', '');
  FreeDynArrayOfWord(Src);
  FreeDynArrayOfWord(Dest);
end;


procedure TTestDynArraysOfWordCase_TestCopyFromDynArray_CompletelyOutOfContent;
var
  Src, Dest: TDynArrayOfWord;
  s: string[20];
begin
  InitDynArrayOfWordToEmpty(Src);
  ExpectBoolean(StringToDynArrayOfWord('0123456789ABCDEF', Src)).ToBe(True, '');
  CopyFromDynArrayOfWord(Dest, Src, 50, 20);

  DynArrayOfWordToString(Dest, s);
  ExpectString(s).ToBe('', '');
  FreeDynArrayOfWord(Src);
  FreeDynArrayOfWord(Dest);
end;


procedure TTestDynArraysOfWordCase_TestCopyFromDynArray_EmptySource;
var
  Src, Dest: TDynArrayOfWord;
  s: string[20];
begin
  InitDynArrayOfWordToEmpty(Src);
  CopyFromDynArrayOfWord(Dest, Src, 0, 20);

  DynArrayOfWordToString(Dest, s);
  ExpectString(s).ToBe('', '');
  FreeDynArrayOfWord(Src);
  FreeDynArrayOfWord(Dest);
end;


procedure TTestDynArraysOfWordCase_TestDeleteFromDynArray_EmptyArray;
var
  Arr: TDynArrayOfWord;
begin
  InitDynArrayOfWordToEmpty(Arr);
  DeleteItemFromDynArrayOfWord(Arr, 0);
  ExpectDWord(Arr.Len).ToBe(0, '');
  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestDeleteFromDynArray_IndexOutOfBounds;
var
  Arr: TDynArrayOfWord;
  FoundException: Boolean;
begin
  FoundException := False;
  InitDynArrayOfWordToEmpty(Arr);
  //try
    SetDynOfWordLength(Arr, 3);
    ExpectBoolean(DeleteItemFromDynArrayOfWord(Arr, 3)).ToBe(False, '');
  //except
  //  on E: Exception do
  //  begin
  //    FoundException := True;
  //    Expect(E.Message).ToBe('Delete index out of bounds in DeleteItemFromDynArrayOfWord.');
  //  end;
  //end;

  //ExpectBoolean(FoundException).ToBe(True, '');
  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestDeleteFromDynArray_HappyFlow1;
var
  Arr: TDynArrayOfWord;
  i: Integer;
begin
  InitDynArrayOfWordToEmpty(Arr);

  SetDynOfWordLength(Arr, 7);
  for i := 0 to Arr.Len - 1 do
    Arr.Content^[i] := i + 20;

  DeleteItemFromDynArrayOfWord(Arr, 3);

  ExpectDWord(Arr.Len).ToBe(6, '');

  for i := 0 to 2 do
    ExpectDWord(Arr.Content^[i]).ToBe(i + 20, '');

  for i := 3 to Arr.Len - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i + 20 + 1, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestDeleteFromDynArray_HappyFlow2;
var
  Arr: TDynArrayOfWord;
  i: Integer;
begin
  InitDynArrayOfWordToEmpty(Arr);

  SetDynOfWordLength(Arr, 7);
  for i := 0 to Arr.Len - 1 do
    Arr.Content^[i] := i + 20;

  DeleteItemFromDynArrayOfWord(Arr, 0);

  ExpectDWord(Arr.Len).ToBe(6, '');

  for i := 0 to Arr.Len - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i + 20 + 1, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestCreateUniqueWord_HappyFlow1;
var
  Arr: TDynArrayOfWord;
begin
  InitDynArrayOfWordToEmpty(Arr);

  //SetDynOfWordLength(Arr, 0);
  ExpectDWord(CreateUniqueWord(Arr)).ToBe(0, '');
  ExpectDWord(Arr.Len).ToBe(1, '');
  ExpectDWord(Arr.Content^[0]).ToBe(0, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestCreateUniqueWord_HappyFlow2;
var
  Arr: TDynArrayOfWord;
begin
  InitDynArrayOfWordToEmpty(Arr);

  SetDynOfWordLength(Arr, 1);
  Arr.Content^[0] := 0;
  ExpectDWord(CreateUniqueWord(Arr)).ToBe(1, '');
  ExpectDWord(Arr.Len).ToBe(2, '');
  ExpectDWord(Arr.Content^[0]).ToBe(0, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestCreateUniqueWord_HappyFlow3;
var
  Arr: TDynArrayOfWord;
begin
  InitDynArrayOfWordToEmpty(Arr);

  SetDynOfWordLength(Arr, 2);
  Arr.Content^[0] := 0;
  Arr.Content^[1] := 2;
  ExpectDWord(CreateUniqueWord(Arr)).ToBe(3, '');
  ExpectDWord(Arr.Len).ToBe(3, '');

  ExpectDWord(Arr.Content^[0]).ToBe(0, '');
  ExpectDWord(Arr.Content^[1]).ToBe(2, '');
  ExpectDWord(Arr.Content^[2]).ToBe(3, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestCreateUniqueWord_HappyFlow4;
var
  Arr: TDynArrayOfWord;
begin
  InitDynArrayOfWordToEmpty(Arr);

  SetDynOfWordLength(Arr, 3);
  Arr.Content^[0] := 0;
  Arr.Content^[1] := 2;
  Arr.Content^[2] := 3;
  ExpectDWord(CreateUniqueWord(Arr)).ToBe(4, '');
  ExpectDWord(Arr.Len).ToBe(4, '');

  ExpectDWord(Arr.Content^[0]).ToBe(0, '');
  ExpectDWord(Arr.Content^[1]).ToBe(2, '');
  ExpectDWord(Arr.Content^[2]).ToBe(3, '');
  ExpectDWord(Arr.Content^[3]).ToBe(4, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestCreateUniqueWord_HappyFlow5;
var
  Arr: TDynArrayOfWord;
  i: LongInt;
begin
  {$IFDEF P32}
    if BMXDRMSZ <= 131072 then //At least 128K is required for the tested array only.
    begin
      UART_WriteLn_Text('Test skipped because of low RAM.');
      Exit;
    end;
  {$ENDIF}

  InitDynArrayOfWordToEmpty(Arr);

  ExpectBoolean(SetDynOfWordLength(Arr, 65534)).ToBe(True, 'Increase MaxMM value in case of an error.');
  for i := 0 to 65534 - 1 do
    Arr.Content^[i] := i;

  ExpectDWord(CreateUniqueWord(Arr)).ToBe(65534, '');
  ExpectDWord(Arr.Len).ToBe(65535, '');

  for i := 0 to 65534 - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestCreateUniqueWord_HappyFlow6;  //the search wraps around to find a free number
var
  Arr: TDynArrayOfWord;
  i: LongInt;
begin
  {$IFDEF P32}
    if BMXDRMSZ <= 131072 then //At least 128K is required for the tested array only.
    begin
      UART_WriteLn_Text('Test skipped because of low RAM.');
      Exit;
    end;
  {$ENDIF}
  
  InitDynArrayOfWordToEmpty(Arr);

  ExpectBoolean(SetDynOfWordLength(Arr, 65534)).ToBe(True, '');
  for i := 0 to 10 - 1 do
    Arr.Content^[i] := i;

  for i := 10 to 65534 - 1 do
    Arr.Content^[i] := i + 1;

  ExpectDWord(CreateUniqueWord(Arr)).ToBe(10, '');
  ExpectDWord(Arr.Len).ToBe(65535, '');

  for i := 0 to 10 - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i, '');

  for i := 10 to 65534 - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i + 1, '');

  ExpectDWord(Arr.Content^[65534]).ToBe(10, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestCreateUniqueWord_FullArray1;
var
  Arr: TDynArrayOfWord;
  i: LongInt;
begin
  {$IFDEF P32}
    if BMXDRMSZ <= 131072 then //At least 128K is required for the tested array only.
    begin
      UART_WriteLn_Text('Test skipped because of low RAM.');
      Exit;
    end;
  {$ENDIF}
  
  InitDynArrayOfWordToEmpty(Arr);

  ExpectBoolean(SetDynOfWordLength(Arr, 65535)).ToBe(True, '');
  for i := 0 to Arr.Len - 1 do
    Arr.Content^[i] := i;

  ExpectDWord(CreateUniqueWord(Arr)).ToBe(65535, ''); //65535 is an error indicator, not a valid number
  ExpectDWord(Arr.Len).ToBe(65535, '');

  for i := 0 to Arr.Len - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestCreateUniqueWord_FullArray2;
var
  Arr: TDynArrayOfWord;
  i: LongInt;
begin
  {$IFDEF P32}
    if BMXDRMSZ <= 131072 then //At least 128K is required for the tested array only.
    begin
      UART_WriteLn_Text('Test skipped because of low RAM.');
      Exit;
    end;
  {$ENDIF}
  
  InitDynArrayOfWordToEmpty(Arr);

  ExpectBoolean(SetDynOfWordLength(Arr, 65535)).ToBe(True, '');
  for i := 0 to Arr.Len - 1 do
    Arr.Content^[i] := 0;

  ExpectDWord(CreateUniqueWord(Arr)).ToBe(65535, ''); //65535 is an error indicator, not a valid number
  ExpectDWord(Arr.Len).ToBe(65535, '');

  for i := 0 to Arr.Len - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(0, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestCreateUniqueWord_FullArray3;
var
  Arr: TDynArrayOfWord;
  i: LongInt;
begin
  {$IFDEF P32}
    if BMXDRMSZ <= 131072 then //At least 128K is required for the tested array only.
    begin
      UART_WriteLn_Text('Test skipped because of low RAM.');
      Exit;
    end;
  {$ENDIF}
  
  InitDynArrayOfWordToEmpty(Arr);

  ExpectDWord(SetDynOfWordLength(Arr, 65540)).ToBe(True, '');  //The array has more numbers than the max value CreateUniqueWord can create.
  for i := 0 to Arr.Len - 1 do
    Arr.Content^[i] := i;

  ExpectDWord(CreateUniqueWord(Arr)).ToBe(65535, ''); //65535 is an error indicator, not a valid number
  ExpectDWord(Arr.Len).ToBe(65540, '');

  for i := 0 to Arr.Len - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i and $FFFF, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestCreateUniqueWord_FullArray4;
var
  Arr: TDynArrayOfWord;
  i: LongInt;
begin
  {$IFDEF P32}
    if BMXDRMSZ <= 131072 then //At least 128K is required for the tested array only.
    begin
      UART_WriteLn_Text('Test skipped because of low RAM.');
      Exit;
    end;
  {$ENDIF}
  
  InitDynArrayOfWordToEmpty(Arr);

  ExpectBoolean(SetDynOfWordLength(Arr, 65540)).ToBe(True, ''); //The array has more numbers than the max value CreateUniqueWord can create.
  for i := 0 to Arr.Len - 1 do
    Arr.Content^[i] := 3;

  ExpectDWord(CreateUniqueWord(Arr)).ToBe(65535, ''); //65535 is an error indicator, not a valid number
  ExpectDWord(Arr.Len).ToBe(65540, '');

  for i := 0 to Arr.Len - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(3, '');

  FreeDynArrayOfWord(Arr);
end;


procedure TTestDynArraysOfWordCase_TestDoubleFree;
var
  Arr: TDynArrayOfWord;
begin
  InitDynArrayOfWordToEmpty(Arr);
  SetDynOfWordLength(Arr, 3);

  FreeDynArrayOfWord(Arr);
  ExpectDWord(Arr.Len).ToBe(0, '');
  ExpectDWord(Arr.Content).ToBe(nil, '');

  //try                            //Free again. The structure should stay the same. No exception is expected.
    FreeDynArrayOfWord(Arr);
    ExpectDWord(Arr.Len).ToBe(0, '');
    ExpectDWord(Arr.Content).ToBe(nil, '');
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe('No exception is expected!');
  //end;
end;


//==============================================================================

procedure RegisterTest_TTestDynArraysOfWordCase(var ATestName: string; ATestProc: PTestProc);
begin
  if TestDynArraysOfWordCase.TestCount >= CMaxTestCountPerSuite then
  begin
    UART_WriteLn_Text('Error_Cannot register more tests to TTestDynArraysOfWordCase.');
    Exit;
  end;

  if Length(ATestName) > CMaxTestNameLength then
  begin
    UART_WriteLn_Text('Error_Cannot register test with long name to TTestDynArraysOfWordCase.');
    UART_WriteLn_Text('Error_LongTestName:');
    UART_WriteLn_Text(ATestName);
    Exit;
  end;

  TestDynArraysOfWordCase.Tests[TestDynArraysOfWordCase.TestCount].Name := ATestName;
  TestDynArraysOfWordCase.Tests[TestDynArraysOfWordCase.TestCount].TestProc := ATestProc;
  Inc(TestDynArraysOfWordCase.TestCount);
end;


procedure RegisterTTestDynArraysOfWordCaseProcs;
begin
  TestDynArraysOfWordCase.TestCount := 0;
  TestDynArraysOfWordCase.SetUp := @TTestDynArraysOfWordCase_SetUp;
  TestDynArraysOfWordCase.TearDown := @TTestDynArraysOfWordCase_TearDown;

  RegisterTest_TTestDynArraysOfWordCase('TestSimpleAllocation', @TTestDynArraysOfWordCase_TestSimpleAllocation);
  RegisterTest_TTestDynArraysOfWordCase('TestWritingToArray', @TTestDynArraysOfWordCase_TestWritingToArray);
  RegisterTest_TTestDynArraysOfWordCase('TestReallocationToLargerArray', @TTestDynArraysOfWordCase_TestReallocationToLargerArray);
  RegisterTest_TTestDynArraysOfWordCase('TestReallocationToSmallerArray', @TTestDynArraysOfWordCase_TestReallocationToSmallerArray);
  RegisterTest_TTestDynArraysOfWordCase('TestConcatDynArrays_HappyFlow', @TTestDynArraysOfWordCase_TestConcatDynArrays_HappyFlow);
  RegisterTest_TTestDynArraysOfWordCase('TestConcatDynArray_WithEmpty', @TTestDynArraysOfWordCase_TestConcatDynArray_WithEmpty);
  RegisterTest_TTestDynArraysOfWordCase('TestConcatEmptyDynArray_WithValid', @TTestDynArraysOfWordCase_TestConcatEmptyDynArray_WithValid);
  RegisterTest_TTestDynArraysOfWordCase('TestConcatEmptyDynArray_WithEmpty', @TTestDynArraysOfWordCase_TestConcatEmptyDynArray_WithEmpty);
  RegisterTest_TTestDynArraysOfWordCase('Test_CallDynLength_WithoutInitDynArray', @TTestDynArraysOfWordCase_Test_CallDynLength_WithoutInitDynArray);
  RegisterTest_TTestDynArraysOfWordCase('Test_CallSetDynLength_WithoutInitDynArray', @TTestDynArraysOfWordCase_Test_CallSetDynLength_WithoutInitDynArray);
  RegisterTest_TTestDynArraysOfWordCase('Test_CallConcatDynArrays_WithoutFirstInitDynArray', @TTestDynArraysOfWordCase_Test_CallConcatDynArrays_WithoutFirstInitDynArray);
  RegisterTest_TTestDynArraysOfWordCase('Test_CallConcatDynArrays_WithoutSecondInitDynArray', @TTestDynArraysOfWordCase_Test_CallConcatDynArrays_WithoutSecondInitDynArray);
  RegisterTest_TTestDynArraysOfWordCase('TestDeleteFirstWords_ZeroLength', @TTestDynArraysOfWordCase_TestDeleteFirstWords_ZeroLength);
  RegisterTest_TTestDynArraysOfWordCase('TestDeleteFirstWords_LessThanLength', @TTestDynArraysOfWordCase_TestDeleteFirstWords_LessThanLength);
  RegisterTest_TTestDynArraysOfWordCase('TestDeleteFirstWords_LessThanLength_MoreItems', @TTestDynArraysOfWordCase_TestDeleteFirstWords_LessThanLength_MoreItems);
  RegisterTest_TTestDynArraysOfWordCase('TestDeleteFirstWords_SameAsLength', @TTestDynArraysOfWordCase_TestDeleteFirstWords_SameAsLength);
  RegisterTest_TTestDynArraysOfWordCase('TestDeleteFirstWords_GreaterThanLength', @TTestDynArraysOfWordCase_TestDeleteFirstWords_GreaterThanLength);
  RegisterTest_TTestDynArraysOfWordCase('TestCopyFromDynArray_HappyFlow', @TTestDynArraysOfWordCase_TestCopyFromDynArray_HappyFlow);
  RegisterTest_TTestDynArraysOfWordCase('TestCopyFromDynArray_0Length', @TTestDynArraysOfWordCase_TestCopyFromDynArray_0Length);
  RegisterTest_TTestDynArraysOfWordCase('TestCopyFromDynArray_PartialOutOfContent', @TTestDynArraysOfWordCase_TestCopyFromDynArray_PartialOutOfContent);
  RegisterTest_TTestDynArraysOfWordCase('TestCopyFromDynArray_CompletelyOutOfContent', @TTestDynArraysOfWordCase_TestCopyFromDynArray_CompletelyOutOfContent);
  RegisterTest_TTestDynArraysOfWordCase('TestCopyFromDynArray_EmptySource', @TTestDynArraysOfWordCase_TestCopyFromDynArray_EmptySource);
  RegisterTest_TTestDynArraysOfWordCase('TestDeleteFromDynArray_EmptyArray', @TTestDynArraysOfWordCase_TestDeleteFromDynArray_EmptyArray);
  RegisterTest_TTestDynArraysOfWordCase('TestDeleteFromDynArray_IndexOutOfBounds', @TTestDynArraysOfWordCase_TestDeleteFromDynArray_IndexOutOfBounds);
  RegisterTest_TTestDynArraysOfWordCase('TestDeleteFromDynArray_HappyFlow1', @TTestDynArraysOfWordCase_TestDeleteFromDynArray_HappyFlow1);
  RegisterTest_TTestDynArraysOfWordCase('TestDeleteFromDynArray_HappyFlow2', @TTestDynArraysOfWordCase_TestDeleteFromDynArray_HappyFlow2);
  RegisterTest_TTestDynArraysOfWordCase('TestCreateUniqueWord_HappyFlow1', @TTestDynArraysOfWordCase_TestCreateUniqueWord_HappyFlow1);
  RegisterTest_TTestDynArraysOfWordCase('TestCreateUniqueWord_HappyFlow2', @TTestDynArraysOfWordCase_TestCreateUniqueWord_HappyFlow2);
  RegisterTest_TTestDynArraysOfWordCase('TestCreateUniqueWord_HappyFlow3', @TTestDynArraysOfWordCase_TestCreateUniqueWord_HappyFlow3);
  RegisterTest_TTestDynArraysOfWordCase('TestCreateUniqueWord_HappyFlow4', @TTestDynArraysOfWordCase_TestCreateUniqueWord_HappyFlow4);
  RegisterTest_TTestDynArraysOfWordCase('TestCreateUniqueWord_HappyFlow5', @TTestDynArraysOfWordCase_TestCreateUniqueWord_HappyFlow5);
  RegisterTest_TTestDynArraysOfWordCase('TestCreateUniqueWord_HappyFlow6', @TTestDynArraysOfWordCase_TestCreateUniqueWord_HappyFlow6);
  RegisterTest_TTestDynArraysOfWordCase('TestCreateUniqueWord_FullArray1', @TTestDynArraysOfWordCase_TestCreateUniqueWord_FullArray1);
  RegisterTest_TTestDynArraysOfWordCase('TestCreateUniqueWord_FullArray2', @TTestDynArraysOfWordCase_TestCreateUniqueWord_FullArray2);
  RegisterTest_TTestDynArraysOfWordCase('TestCreateUniqueWord_FullArray3', @TTestDynArraysOfWordCase_TestCreateUniqueWord_FullArray3);
  RegisterTest_TTestDynArraysOfWordCase('TestCreateUniqueWord_FullArray4', @TTestDynArraysOfWordCase_TestCreateUniqueWord_FullArray4);
  RegisterTest_TTestDynArraysOfWordCase('TestDoubleFree', @TTestDynArraysOfWordCase_TestDoubleFree);
end;

end.