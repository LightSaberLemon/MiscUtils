{
    Copyright (C) 2024 VCC
    creation date: 20 Apr 2024 - copied from TestDynArraysMik.mpas
    initial release date: 20 Apr 2024

    author: VCC
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}


program TestDynArraysMikPIC32MZ;

uses
  Expectations;

//Board: PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit.

const HEAP_START: DWord = $A0000FDC;  //make sure this is a valid address and is DWord aligned !
const HEAP_SIZE: DWord = 500000   //Make sure enough memory is allocated. The largest tested array is 65536 items * 4bytes. More than double may be required.
;


var
  U2TX: sbit at LATB.14;        //AN9/RPB14/SCK3/RB14
  U2RX: sbit at PORTG.6;        //AN14/C1IND/RPG6/SCK2/RG6

  LED1: sbit at LATA.4;
  LED2: sbit at LATB.14;
  
  U2TX_dir: sbit at TRISB.14;
  U2RX_dir: sbit at TRISG.6;

  LED_R: sbit at LATH.0;    //red
  LED_G: sbit at LATH.1;    //yellow
  LED_B: sbit at LATH.2;    //green

  CauseStr, AddressStr: string[30];
  
procedure GenExcept;
var
  Cause, Address: DWord;
begin
  Cause := CP0_GET(CP0_CAUSE);
  //Cause := (Cause and $7C) shr 2;
  Address := CP0_GET(CP0_EPC);

  UART_WriteLn_Text('Exception:');

  //LongWordToHex(Cause, CauseStr);      //this call generates another exception
  //LongWordToHex(Address, AddressStr);  //this call generates another exception
  LongWordToStr(Cause, CauseStr);
  LongWordToStr(Address, AddressStr);
  
  UART_WriteLn_Text('Cause');
  UART_WriteLn_Text(CauseStr);
  UART_WriteLn_Text('Address');
  UART_WriteLn_Text(AddressStr);

  repeat
    LED_R := not LED_R;
    LED_G := not LED_G;
    LED_B := not LED_B;
    Delay_ms(500);
  until False;
end;
  
  
procedure InitRGBLED;
begin
  TRISH.0 := 0;
  TRISH.1 := 0;
  TRISH.2 := 0;
  LED_R := 0;
  LED_G := 0;
  LED_B := 0;
end;


procedure SetPins;
begin
  ANSELA := 0;
  ANSELB := 0;
  ANSELC := 0;
  ANSELD := 0;
  ANSELE := 0;
  ANSELF := 0;
  ANSELG := 0;
  ANSELH := 0;
  ANSELJ := 0;

  U2TX_dir := 0;
  U2RX_dir := 1;

  JTAGEN_bit := 0;
  
  InitRGBLED;
  
  Unlock_IOLOCK;
  U2RXR := 1; //AN14/C1IND/RPG6/SCK2/RG6
  RPB14R := 2; //U2TX = AN9/RPB14/SCK3/RB14

  Lock_IOLOCK;
end;


begin
  Delay_ms(100);

  SetPins;
  MM_Init;
  
  LED1 := 1;
  Delay_ms(100);
  LED2 := 1;
  Delay_ms(100);
  LED1 := 0;
  Delay_ms(100);
  LED2 := 0;
  
  UART2_Init(256000);
  UART_Set_Active(@UART2_Read, @UART2_Write, @UART2_Data_Ready, @UART2_Tx_Idle); // set UART2 active
  UART_WriteLn_Text('Starting tests...');

                              //Comment some of the following test suite calls if not enough memory:
  TTestDynArrays_RunTests;
  TTestDynOfDynOfByteCase_RunTests;
  TTestDynOfDynOfDynOfByteCase_RunTests;
  TTestDynArraysOfPtrUIntCase_RunTests;
  TTestDynArraysOfWordCase_RunTests;
  TTestDynOfDynOfWordCase_RunTests;
  TTestDynArraysOfDWordCase_RunTests;
  
  UART_WriteLn_Text('Done_All');
  LED1 := 1;
  LED2 := 1;

  repeat
  until False;
end.