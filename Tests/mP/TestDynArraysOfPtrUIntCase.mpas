{
    Copyright (C) 2024 VCC
    creation date: 18 Apr 2024
    initial release date: 18 Apr 2024

    author: VCC
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

unit TestDynArraysOfPtrUIntCase;

uses
  DynArrays, Expectations, TestUtilsMik;

type
  TTestDynArraysOfPtrUIntCase = record
    SetUp: PTestProc;
    TearDown: PTestProc;
    Tests: TNamedTestProcArr;
    TestCount: Integer;
  end;


procedure TTestDynArraysOfPtrUIntCase_RunTests;
procedure RegisterTTestDynArraysOfPtrUIntCaseProcs;


implementation


var
  TestDynArraysOfPtrUIntCase: TTestDynArraysOfPtrUIntCase;


procedure TTestDynArraysOfPtrUIntCase_RunTests;
var
  i, TestCountM1: Integer;
  TestName: string[80];
begin
  RegisterTTestDynArraysOfPtrUIntCaseProcs;

  TestCountM1 := TestDynArraysOfPtrUIntCase.TestCount - 1;

  for i := 0 to TestCountM1 do
  begin
    UART_WriteLn_Text('SetUp_TTestDynArraysOfPtrUIntCase');
    TestDynArraysOfPtrUIntCase.SetUp();

    TestName := 'RunTest_';
    strcat(TestName, TestDynArraysOfPtrUIntCase.Tests[i].Name);
    UART_WriteLn_Text(TestName);

    TestDynArraysOfPtrUIntCase.Tests[i].TestProc();

    UART_WriteLn_Text('TearDown_TTestDynArraysOfPtrUIntCase');
    TestDynArraysOfPtrUIntCase.TearDown();
    UART_WriteLn_Text('_');
  end;
end;


procedure TTestDynArraysOfPtrUIntCase_SetUp;
begin
  MM_Init;
end;


procedure TTestDynArraysOfPtrUIntCase_TearDown;
begin
  //nothing so far
end;


procedure TTestDynArraysOfPtrUIntCase_TestSimpleAllocation;
var
  Arr: TDynArrayOfPtrUInt;
  AllocationResult: Boolean;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr);  //this is what Delphi and FP do automatically

  AllocationResult := SetDynOfPtrUIntLength(Arr, 7);
  //try
    ExpectBoolean(AllocationResult).ToBe(True, 'Expected a successful allocation.');
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), '');
    ExpectDWord(Arr.Len).ToBe(7, '');
  //finally
    FreeDynArrayOfPtrUInt(Arr);  //the array has to be manually freed, because there is no reference counting
  //end;
end;


procedure TTestDynArraysOfPtrUIntCase_TestWritingToArray;
var
  Arr: TDynArrayOfPtrUInt;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr);
  SetDynOfPtrUIntLength(Arr, 20);
  //try
    Arr.Content^[17] := 80;
    ExpectDWord(Arr.Content^[17]).ToBe(80, '');
  //finally
    FreeDynArrayOfPtrUInt(Arr);
  //end;
end;


procedure TTestDynArraysOfPtrUIntCase_TestReallocationToLargerArray;
var
  Arr: TDynArrayOfPtrUInt;
  i: Integer;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr);
  ExpectBoolean(SetDynOfPtrUIntLength(Arr, 20)).ToBe(True, '');

  for i := 0 to DynOfPtrUIntLength(Arr) - 1 do
    Arr.Content^[i] := i * 10;

  ExpectBoolean(SetDynOfPtrUIntLength(Arr, 30)).ToBe(True, 'expecting successful reallocation');
  //try
    for i := 0 to 20 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr.Content^[i]).ToBe(DWord(i * 10), '');
  //finally
    FreeDynArrayOfPtrUInt(Arr);
  //end;
end;


procedure TTestDynArraysOfPtrUIntCase_TestReallocationToSmallerArray;
var
  Arr: TDynArrayOfPtrUInt;
  i: Integer;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr);
  SetDynOfPtrUIntLength(Arr, 20);

  for i := 0 to DynOfPtrUIntLength(Arr) - 1 do
    Arr.Content^[i] := i * 10;

  SetDynOfPtrUIntLength(Arr, 10);
  //try
    for i := 0 to 10 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr.Content^[i]).ToBe(DWord(i * 10), '');
  //finally
    FreeDynArrayOfPtrUInt(Arr);
  //end;
end;


procedure TTestDynArraysOfPtrUIntCase_TestConcatDynArrays_HappyFlow;
var
  Arr1, Arr2: TDynArrayOfPtrUInt;
  AllocationResult: Boolean;
  i: Integer;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr1);
  InitDynArrayOfPtrUIntToEmpty(Arr2);

  //try
    AllocationResult := SetDynOfPtrUIntLength(Arr1, 20);
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'Allocation_20 should succeed.');
    for i := 0 to DynOfPtrUIntLength(Arr1) - 1 do
      Arr1.Content^[i] := 1234 + i * 10;
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'First allocation Result is overwritten.');

    AllocationResult := SetDynOfPtrUIntLength(Arr2, 15);
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'Allocation_15 should succeed.');
    for i := 0 to DynOfPtrUIntLength(Arr2) - 1 do
      Arr2.Content^[i] := 1234 + i * 10;
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'Second allocation Result is overwritten.');

    AllocationResult := ConcatDynArraysOfPtrUInt(Arr1, Arr2);

    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'Concat Result is overwritten or memory is full.');
    ExpectBoolean(AllocationResult).ToBe(True, '');
    ExpectDWord(Arr1.Len).ToBe(35, '');

    for i := 0 to 20 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr1.Content^[i]).ToBe(DWord(1234 + i * 10), '');

    for i := 20 to 35 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr1.Content^[i]).ToBe(DWord(1234 + (i - 20) * 10), '');
  //finally
    FreeDynArrayOfPtrUInt(Arr1);
    FreeDynArrayOfPtrUInt(Arr2);
  //end;
end;


procedure TTestDynArraysOfPtrUIntCase_TestConcatDynArray_WithEmpty;
var
  Arr1, Arr2: TDynArrayOfPtrUInt;
  AllocationResult: Boolean;
  i: Integer;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr1);
  InitDynArrayOfPtrUIntToEmpty(Arr2);

  //try
    AllocationResult := SetDynOfPtrUIntLength(Arr1, 20);
    for i := 0 to DynOfPtrUIntLength(Arr1) - 1 do
      Arr1.Content^[i] := i * 10;

    AllocationResult := ConcatDynArraysOfPtrUInt(Arr1, Arr2);
    ExpectBoolean(AllocationResult).ToBe(True, '');
    ExpectDWord(Arr1.Len).ToBe(20, '');

    for i := 0 to 20 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr1.Content^[i]).ToBe(DWord(i * 10), '');
  //finally
    FreeDynArrayOfPtrUInt(Arr1);
    FreeDynArrayOfPtrUInt(Arr2);
  //end;
end;


procedure TTestDynArraysOfPtrUIntCase_TestConcatEmptyDynArray_WithValid;
var
  Arr1, Arr2: TDynArrayOfPtrUInt;
  AllocationResult: Boolean;
  i: Integer;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr1);
  InitDynArrayOfPtrUIntToEmpty(Arr2);

  //try
    AllocationResult := SetDynOfPtrUIntLength(Arr2, 15);
    for i := 0 to DynOfPtrUIntLength(Arr2) - 1 do
      Arr2.Content^[i] := i * 10;

    AllocationResult := ConcatDynArraysOfPtrUInt(Arr1, Arr2);
    ExpectBoolean(AllocationResult).ToBe(True, '');
    ExpectDWord(Arr1.Len).ToBe(15, '');

    for i := 0 to 15 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr1.Content^[i]).ToBe(DWord(i * 10), '');
  //finally
    FreeDynArrayOfPtrUInt(Arr1);
    FreeDynArrayOfPtrUInt(Arr2);
  //end;
end;


procedure TTestDynArraysOfPtrUIntCase_TestConcatEmptyDynArray_WithEmpty;
var
  Arr1, Arr2: TDynArrayOfPtrUInt;
  AllocationResult: Boolean;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr1);
  InitDynArrayOfPtrUIntToEmpty(Arr2);

  //try
    AllocationResult := ConcatDynArraysOfPtrUInt(Arr1, Arr2);
    ExpectBoolean(AllocationResult).ToBe(True, '');
    ExpectDWord(Arr1.Len).ToBe(0, '');
  //finally
    FreeDynArrayOfPtrUInt(Arr1);
    FreeDynArrayOfPtrUInt(Arr2);
  //end;
end;


procedure TTestDynArraysOfPtrUIntCase_Test_CallDynLength_WithoutInitDynArray;
var
  Arr: TDynArrayOfPtrUInt;
begin
  //try
  //  DynOfPtrUIntLength(Arr);
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe(CUninitializedDynArrayErrMsg);
  //end;
end;


procedure TTestDynArraysOfPtrUIntCase_Test_CallSetDynLength_WithoutInitDynArray;
var
  Arr: TDynArrayOfPtrUInt;
begin
  //try
  //  SetDynOfPtrUIntLength(Arr, 3);
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe(CUninitializedDynArrayErrMsg);
  //end;
end;


procedure TTestDynArraysOfPtrUIntCase_Test_CallConcatDynArrays_WithoutFirstInitDynArray;
var
  Arr1, Arr2: TDynArrayOfPtrUInt;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr2);
  SetDynOfPtrUIntLength(Arr2, 3);

  //try
  //  ConcatDynArraysOfPtrUInt(Arr1, Arr2);
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe(CUninitializedDynArrayErrMsg);
  //end;

  FreeDynArrayOfPtrUInt(Arr2);
end;


procedure TTestDynArraysOfPtrUIntCase_Test_CallConcatDynArrays_WithoutSecondInitDynArray;
var
  Arr1, Arr2: TDynArrayOfPtrUInt;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr1);
  SetDynOfPtrUIntLength(Arr1, 3);

  //try
  //  ConcatDynArraysOfPtrUInt(Arr1, Arr2);
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe(CUninitializedDynArrayErrMsg);
  //end;

  FreeDynArrayOfPtrUInt(Arr1);
end;


procedure TTestDynArraysOfPtrUIntCase_TestDeleteFirstPtrUInts_ZeroLength;
var
  Arr: TDynArrayOfPtrUInt;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr);
  SetDynOfPtrUIntLength(Arr, 3);
  Arr.Content^[0] := 30;
  Arr.Content^[1] := 40;
  Arr.Content^[2] := 50;

  RemoveStartPtrUIntsFromDynArray(0, Arr);

  ExpectDWord(Arr.Len).ToBe(3, '');
  ExpectDWord(Arr.Content^[0]).ToBe(30, '');
  ExpectDWord(Arr.Content^[1]).ToBe(40, '');
  ExpectDWord(Arr.Content^[2]).ToBe(50, '');

  FreeDynArrayOfPtrUInt(Arr);
end;


procedure TTestDynArraysOfPtrUIntCase_TestDeleteFirstPtrUInts_LessThanLength;
var
  Arr: TDynArrayOfPtrUInt;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr);
  SetDynOfPtrUIntLength(Arr, 3);
  Arr.Content^[0] := 30;
  Arr.Content^[1] := 40;
  Arr.Content^[2] := 50;

  RemoveStartPtrUIntsFromDynArray(2, Arr);

  ExpectDWord(Arr.Len).ToBe(1, '');
  ExpectDWord(Arr.Content^[0]).ToBe(50, '');

  FreeDynArrayOfPtrUInt(Arr);
end;


procedure TTestDynArraysOfPtrUIntCase_TestDeleteFirstPtrUInts_LessThanLength_MoreItems;
var
  Arr: TDynArrayOfPtrUInt;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr);
  SetDynOfPtrUIntLength(Arr, 8);
  Arr.Content^[0] := 2030;
  Arr.Content^[1] := 2040;
  Arr.Content^[2] := 2050;
  Arr.Content^[3] := 2060;
  Arr.Content^[4] := 2070;
  Arr.Content^[5] := 2080;
  Arr.Content^[6] := 2090;
  Arr.Content^[7] := 20100;

  RemoveStartPtrUIntsFromDynArray(2, Arr);

  ExpectDWord(Arr.Len).ToBe(6, '');
  ExpectDWord(Arr.Content^[0]).ToBe(2050, '');
  ExpectDWord(Arr.Content^[1]).ToBe(2060, '');
  ExpectDWord(Arr.Content^[2]).ToBe(2070, '');
  ExpectDWord(Arr.Content^[3]).ToBe(2080, '');
  ExpectDWord(Arr.Content^[4]).ToBe(2090, '');
  ExpectDWord(Arr.Content^[5]).ToBe(20100, '');

  FreeDynArrayOfPtrUInt(Arr);
end;


procedure TTestDynArraysOfPtrUIntCase_TestDeleteFirstPtrUInts_SameAsLength;
var
  Arr: TDynArrayOfPtrUInt;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr);
  SetDynOfPtrUIntLength(Arr, 3);
  Arr.Content^[0] := 30;
  Arr.Content^[1] := 40;
  Arr.Content^[2] := 50;

  RemoveStartPtrUIntsFromDynArray(3, Arr);

  ExpectDWord(Arr.Len).ToBe(0, '');

  FreeDynArrayOfPtrUInt(Arr);
end;


procedure TTestDynArraysOfPtrUIntCase_TestDeleteFirstPtrUInts_GreaterThanLength;
var
  Arr: TDynArrayOfPtrUInt;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr);
  SetDynOfPtrUIntLength(Arr, 3);
  RemoveStartPtrUIntsFromDynArray(7, Arr);

  ExpectDWord(Arr.Len).ToBe(0, '');

  FreeDynArrayOfPtrUInt(Arr);
end;


const
  //CSrcString_16bit = '01 23 45 67 89 AB CD EF GH IJ KL MN OP QR ST UV WX YZ ab cd ef gh ij kl mn op qr st uv wx yz';
  //CSrcString_32bit = '0123 4567 89AB CDEF GHIJ KLMN OPQR STUV WXYZ abcd efgh ijkl mnop qrst uvwx yz';
  //CSrcString_64bit = '01234567 89ABCDEF GHIJKLMN OPQRSTUV WXYZabcd efghijkl mnopqrst uvwxyz';

  CSrcString = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';

procedure TTestDynArraysOfPtrUIntCase_TestCopyFromDynArray_HappyFlow;
var
  Src, Dest: TDynArrayOfPtrUInt;
  s: string[80];
begin
  InitDynArrayOfPtrUIntToEmpty(Src);
  ExpectBoolean(StringToDynArrayOfPtrUInt(CSrcString, Src)).ToBe(True, '');

  case SizeOf(PtrUInt) of
    2:  // 2 bytes    //PIC24 / dsPIC
    begin
      CopyFromDynArrayOfPtrUInt(Dest, Src, 3, 7);
      DynArrayOfPtrUIntToString(Dest, s);
      ExpectString(s).ToBe('6789ABCDEFGHIJ', '');
    end;

    4:  // 4 bytes
    begin
      CopyFromDynArrayOfPtrUInt(Dest, Src, 3, 7);
      DynArrayOfPtrUIntToString(Dest, s);
      ExpectString(s).ToBe('CDEFGHIJKLMNOPQRSTUVWXYZabcd', '');
    end;

    8:  // 8 bytes
    begin
      CopyFromDynArrayOfPtrUInt(Dest, Src, 3, 4);  //4 instead of 7, because the string is already too long
      DynArrayOfPtrUIntToString(Dest, s);
      ExpectString(s).ToBe('OPQRSTUVWXYZabcdefghijklmnopqrst', '');
    end;
  end;

  FreeDynArrayOfPtrUInt(Src);
  FreeDynArrayOfPtrUInt(Dest);
end;


procedure TTestDynArraysOfPtrUIntCase_TestCopyFromDynArray_0Length;
var
  Src, Dest: TDynArrayOfPtrUInt;
  s: string[20];
begin
  InitDynArrayOfPtrUIntToEmpty(Src);
  ExpectBoolean(StringToDynArrayOfPtrUInt(CSrcString, Src)).ToBe(True, '');
  CopyFromDynArrayOfPtrUInt(Dest, Src, 3, 0);

  DynArrayOfPtrUIntToString(Dest, s);
  ExpectString(s).ToBe('', '');
  FreeDynArrayOfPtrUInt(Src);
  FreeDynArrayOfPtrUInt(Dest);
end;


procedure TTestDynArraysOfPtrUIntCase_TestCopyFromDynArray_PartialOutOfContent;
var
  Src, Dest: TDynArrayOfPtrUInt;
  s: string[80];
begin
  InitDynArrayOfPtrUIntToEmpty(Src);
  ExpectBoolean(StringToDynArrayOfPtrUInt(CSrcString, Src)).ToBe(True, '');

  case SizeOf(PtrUInt) of
    2:  // 2 bytes   //PIC24 / dsPIC
    begin
      CopyFromDynArrayOfPtrUInt(Dest, Src, 20, 50);
      ExpectDWord(Dest.Len).ToBe(11, ''); //  CopyFromDynArrayOfPtrUInt doesn't care about the content.
      DynArrayOfPtrUIntToString(Dest, s);
      ExpectString(s).ToBe('efghijklmnopqrstuvwxyz', '');
    end;

    4:  // 4 bytes
    begin
      CopyFromDynArrayOfPtrUInt(Dest, Src, 7, 20);
      ExpectDWord(Dest.Len).ToBe(9, ''); //  CopyFromDynArrayOfPtrUInt doesn't care about the content.
      DynArrayOfPtrUIntToString(Dest, s);
      ExpectString(s).ToBe('STUVWXYZabcdefghijklmnopqrstuvwxyz', '');
    end;

    8:  // 8 bytes
    begin
      CopyFromDynArrayOfPtrUInt(Dest, Src, 3, 20);  //4 instead of 7, because the string is already too long
      ExpectDWord(Dest.Len).ToBe(5, ''); //  CopyFromDynArrayOfPtrUInt doesn't care about the content.
      DynArrayOfPtrUIntToString(Dest, s);
      ExpectString(s).ToBe('OPQRSTUV WXYZabcd efghijkl mnopqrst uvwxyz', '');
    end;
  end;

  FreeDynArrayOfPtrUInt(Src);
  FreeDynArrayOfPtrUInt(Dest);
end;


procedure TTestDynArraysOfPtrUIntCase_TestCopyFromDynArray_CompletelyOutOfContent;
var
  Src, Dest: TDynArrayOfPtrUInt;
  s: string[20];
begin
  InitDynArrayOfPtrUIntToEmpty(Src);
  ExpectBoolean(StringToDynArrayOfPtrUInt(CSrcString, Src)).ToBe(True, '');
  CopyFromDynArrayOfPtrUInt(Dest, Src, 50, 20);

  DynArrayOfPtrUIntToString(Dest, s);
  ExpectString(s).ToBe('', '');
  FreeDynArrayOfPtrUInt(Src);
  FreeDynArrayOfPtrUInt(Dest);
end;


procedure TTestDynArraysOfPtrUIntCase_TestCopyFromDynArray_EmptySource;
var
  Src, Dest: TDynArrayOfPtrUInt;
  s: string[20];
begin
  InitDynArrayOfPtrUIntToEmpty(Src);
  CopyFromDynArrayOfPtrUInt(Dest, Src, 0, 20);

  DynArrayOfPtrUIntToString(Dest, s);
  ExpectString(s).ToBe('', '');
  FreeDynArrayOfPtrUInt(Src);
  FreeDynArrayOfPtrUInt(Dest);
end;


procedure TTestDynArraysOfPtrUIntCase_TestDeleteFromDynArray_EmptyArray;
var
  Arr: TDynArrayOfPtrUInt;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr);
  DeleteItemFromDynArrayOfPtrUInt(Arr, 0);
  ExpectDWord(Arr.Len).ToBe(0, '');
  FreeDynArrayOfPtrUInt(Arr);
end;


procedure TTestDynArraysOfPtrUIntCase_TestDeleteFromDynArray_IndexOutOfBounds;
var
  Arr: TDynArrayOfPtrUInt;
  FoundException: Boolean;
begin
  FoundException := False;
  InitDynArrayOfPtrUIntToEmpty(Arr);
  //try
    SetDynOfPtrUIntLength(Arr, 3);
    ExpectBoolean(DeleteItemFromDynArrayOfPtrUInt(Arr, 3)).ToBe(False, '');
  //except
  //  on E: Exception do
  //  begin
  //    FoundException := True;
  //    Expect(E.Message).ToBe('Delete index out of bounds in DeleteItemFromDynArrayOfPtrUInt.');
  //  end;
  //end;

  //ExpectBoolean(FoundException).ToBe(True);
  FreeDynArrayOfPtrUInt(Arr);
end;


procedure TTestDynArraysOfPtrUIntCase_TestDeleteFromDynArray_HappyFlow1;
var
  Arr: TDynArrayOfPtrUInt;
  i: Integer;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr);

  SetDynOfPtrUIntLength(Arr, 7);
  for i := 0 to Arr.Len - 1 do
    Arr.Content^[i] := i + 20;

  DeleteItemFromDynArrayOfPtrUInt(Arr, 3);

  ExpectDWord(Arr.Len).ToBe(6, '');

  for i := 0 to 2 do
    ExpectDWord(Arr.Content^[i]).ToBe(i + 20, '');

  for i := 3 to Arr.Len - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i + 20 + 1, '');

  FreeDynArrayOfPtrUInt(Arr);
end;


procedure TTestDynArraysOfPtrUIntCase_TestDeleteFromDynArray_HappyFlow2;
var
  Arr: TDynArrayOfPtrUInt;
  i: Integer;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr);

  SetDynOfPtrUIntLength(Arr, 7);
  for i := 0 to Arr.Len - 1 do
    Arr.Content^[i] := i + 20;

  DeleteItemFromDynArrayOfPtrUInt(Arr, 0);

  ExpectDWord(Arr.Len).ToBe(6, '');

  for i := 0 to Arr.Len - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i + 20 + 1, '');

  FreeDynArrayOfPtrUInt(Arr);
end;


procedure TTestDynArraysOfPtrUIntCase_TestDoubleFree;
var
  Arr: TDynArrayOfPtrUInt;
begin
  InitDynArrayOfPtrUIntToEmpty(Arr);
  SetDynOfPtrUIntLength(Arr, 3);

  FreeDynArrayOfPtrUInt(Arr);
  ExpectDWord(Arr.Len).ToBe(0, '');
  ExpectDWord(Arr.Content).ToBe(nil, '');

  //try                            //Free again. The structure should stay the same. No exception is expected.
    FreeDynArrayOfPtrUInt(Arr);
    ExpectDWord(Arr.Len).ToBe(0, '');
    ExpectDWord(Arr.Content).ToBe(nil, '');
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe('No exception is expected!');
  //end;
end;


//==============================================================================

procedure RegisterTest_TTestDynArraysOfPtrUIntCase(var ATestName: string; ATestProc: PTestProc);
begin
  if TestDynArraysOfPtrUIntCase.TestCount >= CMaxTestCountPerSuite then
  begin
    UART_WriteLn_Text('Error_Cannot register more tests to TTestDynArraysOfPtrUIntCase.');
    Exit;
  end;

  if Length(ATestName) > CMaxTestNameLength then
  begin
    UART_WriteLn_Text('Error_Cannot register test with long name to TTestDynArraysOfPtrUIntCase.');
    UART_WriteLn_Text('Error_LongTestName:');
    UART_WriteLn_Text(ATestName);
    Exit;
  end;

  TestDynArraysOfPtrUIntCase.Tests[TestDynArraysOfPtrUIntCase.TestCount].Name := ATestName;
  TestDynArraysOfPtrUIntCase.Tests[TestDynArraysOfPtrUIntCase.TestCount].TestProc := ATestProc;
  Inc(TestDynArraysOfPtrUIntCase.TestCount);
end;


procedure RegisterTTestDynArraysOfPtrUIntCaseProcs;
begin
  TestDynArraysOfPtrUIntCase.TestCount := 0;
  TestDynArraysOfPtrUIntCase.SetUp := @TTestDynArraysOfPtrUIntCase_SetUp;
  TestDynArraysOfPtrUIntCase.TearDown := @TTestDynArraysOfPtrUIntCase_TearDown;

  RegisterTest_TTestDynArraysOfPtrUIntCase('TestSimpleAllocation', @TTestDynArraysOfPtrUIntCase_TestSimpleAllocation);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestWritingToArray', @TTestDynArraysOfPtrUIntCase_TestWritingToArray);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestReallocationToLargerArray', @TTestDynArraysOfPtrUIntCase_TestReallocationToLargerArray);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestReallocationToSmallerArray', @TTestDynArraysOfPtrUIntCase_TestReallocationToSmallerArray);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestConcatDynArrays_HappyFlow', @TTestDynArraysOfPtrUIntCase_TestConcatDynArrays_HappyFlow);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestConcatDynArray_WithEmpty', @TTestDynArraysOfPtrUIntCase_TestConcatDynArray_WithEmpty);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestConcatEmptyDynArray_WithValid', @TTestDynArraysOfPtrUIntCase_TestConcatEmptyDynArray_WithValid);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestConcatEmptyDynArray_WithEmpty', @TTestDynArraysOfPtrUIntCase_TestConcatEmptyDynArray_WithEmpty);
  RegisterTest_TTestDynArraysOfPtrUIntCase('Test_CallDynLength_WithoutInitDynArray', @TTestDynArraysOfPtrUIntCase_Test_CallDynLength_WithoutInitDynArray);
  RegisterTest_TTestDynArraysOfPtrUIntCase('Test_CallSetDynLength_WithoutInitDynArray', @TTestDynArraysOfPtrUIntCase_Test_CallSetDynLength_WithoutInitDynArray);
  RegisterTest_TTestDynArraysOfPtrUIntCase('Test_CallConcatDynArrays_WithoutFirstInitDynArray', @TTestDynArraysOfPtrUIntCase_Test_CallConcatDynArrays_WithoutFirstInitDynArray);
  RegisterTest_TTestDynArraysOfPtrUIntCase('Test_CallConcatDynArrays_WithoutSecondInitDynArray', @TTestDynArraysOfPtrUIntCase_Test_CallConcatDynArrays_WithoutSecondInitDynArray);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestDeleteFirstPtrUInts_ZeroLength', @TTestDynArraysOfPtrUIntCase_TestDeleteFirstPtrUInts_ZeroLength);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestDeleteFirstPtrUInts_LessThanLength', @TTestDynArraysOfPtrUIntCase_TestDeleteFirstPtrUInts_LessThanLength);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestDeleteFirstPtrUInts_LessThanLength_MoreItems', @TTestDynArraysOfPtrUIntCase_TestDeleteFirstPtrUInts_LessThanLength_MoreItems);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestDeleteFirstPtrUInts_SameAsLength', @TTestDynArraysOfPtrUIntCase_TestDeleteFirstPtrUInts_SameAsLength);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestDeleteFirstPtrUInts_GreaterThanLength', @TTestDynArraysOfPtrUIntCase_TestDeleteFirstPtrUInts_GreaterThanLength);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestCopyFromDynArray_HappyFlow', @TTestDynArraysOfPtrUIntCase_TestCopyFromDynArray_HappyFlow);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestCopyFromDynArray_0Length', @TTestDynArraysOfPtrUIntCase_TestCopyFromDynArray_0Length);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestCopyFromDynArray_PartialOutOfContent', @TTestDynArraysOfPtrUIntCase_TestCopyFromDynArray_PartialOutOfContent);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestCopyFromDynArray_CompletelyOutOfContent', @TTestDynArraysOfPtrUIntCase_TestCopyFromDynArray_CompletelyOutOfContent);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestCopyFromDynArray_EmptySource', @TTestDynArraysOfPtrUIntCase_TestCopyFromDynArray_EmptySource);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestDeleteFromDynArray_EmptyArray', @TTestDynArraysOfPtrUIntCase_TestDeleteFromDynArray_EmptyArray);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestDeleteFromDynArray_IndexOutOfBounds', @TTestDynArraysOfPtrUIntCase_TestDeleteFromDynArray_IndexOutOfBounds);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestDeleteFromDynArray_HappyFlow1', @TTestDynArraysOfPtrUIntCase_TestDeleteFromDynArray_HappyFlow1);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestDeleteFromDynArray_HappyFlow2', @TTestDynArraysOfPtrUIntCase_TestDeleteFromDynArray_HappyFlow2);
  RegisterTest_TTestDynArraysOfPtrUIntCase('TestDoubleFree', @TTestDynArraysOfPtrUIntCase_TestDoubleFree);
end;

end.