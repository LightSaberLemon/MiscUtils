{
    Copyright (C) 2024 VCC
    creation date: 30 May 2023
    initial release date: 18 Apr 2024

    author: VCC
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}


program TestDynArraysMik;

uses
  Expectations;

{ Declarations section }

const HEAP_START: DWord = $A0000FDC;  //make sure this is a valid address and is DWord aligned !
const HEAP_SIZE: DWord = {$I MaxMM.inc}   //Make sure enough memory is allocated. See the desktop application (simulator) for guidance.
;


var
  U2TX: sbit at LATB.0;
  U2RX: sbit at PORTB.1;
  U1TX: sbit at LATB.15;
  U1RX: sbit at PORTB.13;
  
  Btn: sbit at PORTB.4;
  LED1: sbit at LATA.4;
  LED2: sbit at LATB.14;
  
  U2TX_dir: sbit at TRISB.0;
  U2RX_dir: sbit at TRISB.1;
  U1TX_dir: sbit at TRISB.15;
  U1RX_dir: sbit at TRISB.13;
  
  Btn_dir: sbit at TRISB.4;
  LED1_dir: sbit at TRISA.4;
  LED2_dir: sbit at TRISB.14;

  CauseStr, AddressStr: string[30];
  
procedure GenExcept;
var
  Cause, Address: DWord;
begin
  Cause := CP0_GET(CP0_CAUSE);
  //Cause := (Cause and $7C) shr 2;
  Address := CP0_GET(CP0_EPC);

  UART_WriteLn_Text('Exception:');

  //LongWordToHex(Cause, CauseStr);      //this call generates another exception
  //LongWordToHex(Address, AddressStr);  //this call generates another exception
  LongWordToStr(Cause, CauseStr);
  LongWordToStr(Address, AddressStr);
  
  UART_WriteLn_Text('Cause');
  UART_WriteLn_Text(CauseStr);
  UART_WriteLn_Text('Address');
  UART_WriteLn_Text(AddressStr);

  repeat
    LED1 := not LED1;
    LED2 := not LED1;
    Delay_ms(500);
  until False;
end;
  

procedure SetPins;
begin
  ANSELA := 0;
  ANSELB := 0;

  U2TX_dir := 0;
  U2RX_dir := 1;
  U1TX_dir := 0;
  U1RX_dir := 1;
  
  Btn_dir := 1;
  LED1_dir := 0;
  LED2_dir := 0;
  
  LED1 := 0;
  LED2 := 0;
  
  Unlock_IOLOCK;
  U2RXR := 2; //RPB1
  U1RXR := 3; //RPB13
  RPB0R := 2; //U2TX = RB0
  RPB15R := 1; //U1TX = RB15

  Lock_IOLOCK;
end;


var
  Arr: TDynArrayOfByte;
  Buf: ^Byte; volatile;
begin
  Delay_ms(100);

  SetPins;
  MM_Init;
  
  LED1 := 1;
  Delay_ms(100);
  LED2 := 1;
  Delay_ms(100);
  LED1 := 0;
  Delay_ms(100);
  LED2 := 0;
  
  UART2_Init(256000);
  UART2_Write_Text('Starting tests...');
  UART2_Write(#13);
  UART2_Write(#10);
  UART_Set_Active(@UART2_Read, @UART2_Write, @UART2_Data_Ready, @UART2_Tx_Idle); // set UART2 active

  TTestDynArrays_RunTests;
  TTestDynOfDynOfByteCase_RunTests;
  TTestDynOfDynOfDynOfByteCase_RunTests;
  TTestDynArraysOfPtrUIntCase_RunTests;
  TTestDynArraysOfWordCase_RunTests;
  TTestDynOfDynOfWordCase_RunTests;
  
  UART_WriteLn_Text('Done_All');
  LED1 := 1;
  LED2 := 1;

  repeat
  until False;
end.