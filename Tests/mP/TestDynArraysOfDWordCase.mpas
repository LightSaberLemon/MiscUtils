{
    Copyright (C) 2024 VCC
    creation date: 21 Apr 2024
    initial release date: 21 Apr 2024

    author: VCC
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

unit TestDynArraysOfDWordCase;

uses
  DynArrays, Expectations, TestUtilsMik;

type
  TTestDynArraysOfDWordCase = record
    SetUp: PTestProc;
    TearDown: PTestProc;
    Tests: TNamedTestProcArr;
    TestCount: Integer;
  end;


procedure TTestDynArraysOfDWordCase_RunTests;
procedure RegisterTTestDynArraysOfDWordCaseProcs;


implementation


var
  TestDynArraysOfDWordCase: TTestDynArraysOfDWordCase;  //If compilers report not enough RAM, then please comment some of the test suites from main file.

{$IFDEF P30}
  {$DEFINE AppArch16}
{$ENDIF}

{$IFDEF P33}
  {$DEFINE AppArch16}
{$ENDIF}

{$IFDEF P24}
  {$DEFINE AppArch16}
{$ENDIF}


procedure TTestDynArraysOfDWordCase_RunTests;
var
  i, TestCountM1: Integer;
  TestName: string[80];
begin
  RegisterTTestDynArraysOfDWordCaseProcs;

  TestCountM1 := TestDynArraysOfDWordCase.TestCount - 1;

  for i := 0 to TestCountM1 do
  begin
    UART_WriteLn_Text('SetUp_TTestDynArraysOfDWordCase');
    TestDynArraysOfDWordCase.SetUp();

    TestName := 'RunTest_';
    strcat(TestName, TestDynArraysOfDWordCase.Tests[i].Name);
    UART_WriteLn_Text(TestName);

    TestDynArraysOfDWordCase.Tests[i].TestProc();

    UART_WriteLn_Text('TearDown_TTestDynArraysOfDWordCase');
    TestDynArraysOfDWordCase.TearDown();
    UART_WriteLn_Text('_');
  end;
end;


procedure TTestDynArraysOfDWordCase_SetUp;
begin
  MM_Init;
end;


procedure TTestDynArraysOfDWordCase_TearDown;
begin
  //nothing so far
end;


procedure TTestDynArraysOfDWordCase_TestSimpleAllocation;
var
  Arr: TDynArrayOfDWord;
  AllocationResult: Boolean;
begin
  InitDynArrayOfDWordToEmpty(Arr);  //this is what Delphi and FP do automatically

  AllocationResult := SetDynOfDWordLength(Arr, 7);
  //try
    ExpectBoolean(AllocationResult).ToBe(True, 'Expected a successful allocation.');
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), '');
    ExpectDWord(Arr.Len).ToBe(7, '');
  //finally
    FreeDynArrayOfDWord(Arr);  //the array has to be manually freed, because there is no reference counting
  //end;
end;


procedure TTestDynArraysOfDWordCase_TestWritingToArray;
var
  Arr: TDynArrayOfDWord;
begin
  InitDynArrayOfDWordToEmpty(Arr);
  SetDynOfDWordLength(Arr, 20);
  //try
    Arr.Content^[17] := 80;
    ExpectDWord(Arr.Content^[17]).ToBe(80, '');
  //finally
    FreeDynArrayOfDWord(Arr);
  //end;
end;


procedure TTestDynArraysOfDWordCase_TestReallocationToLargerArray;
var
  Arr: TDynArrayOfDWord;
  i: Integer;
begin
  InitDynArrayOfDWordToEmpty(Arr);
  ExpectBoolean(SetDynOfDWordLength(Arr, 20)).ToBe(True, '');

  for i := 0 to DynOfDWordLength(Arr) - 1 do
    Arr.Content^[i] := i * 10;

  ExpectBoolean(SetDynOfDWordLength(Arr, 30)).ToBe(True, 'expecting successful reallocation');
  //try
    for i := 0 to 20 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr.Content^[i]).ToBe(DWord(i * 10), '');
  //finally
    FreeDynArrayOfDWord(Arr);
  //end;
end;


procedure TTestDynArraysOfDWordCase_TestReallocationToSmallerArray;
var
  Arr: TDynArrayOfDWord;
  i: Integer;
begin
  InitDynArrayOfDWordToEmpty(Arr);
  SetDynOfDWordLength(Arr, 20);

  for i := 0 to DynOfDWordLength(Arr) - 1 do
    Arr.Content^[i] := i * 10;

  SetDynOfDWordLength(Arr, 10);
  //try
    for i := 0 to 10 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr.Content^[i]).ToBe(DWord(i * 10), '');
  //finally
    FreeDynArrayOfDWord(Arr);
  //end;
end;


procedure TTestDynArraysOfDWordCase_TestConcatDynArrays_HappyFlow;
var
  Arr1, Arr2: TDynArrayOfDWord;
  AllocationResult: Boolean;
  i: Integer;
begin
  InitDynArrayOfDWordToEmpty(Arr1);
  InitDynArrayOfDWordToEmpty(Arr2);

  //try
    AllocationResult := SetDynOfDWordLength(Arr1, 20);
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'Allocation_20 should succeed.');
    for i := 0 to DynOfDWordLength(Arr1) - 1 do
      Arr1.Content^[i] := 1234 + i * 10;
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'First allocation Result is overwritten.');

    AllocationResult := SetDynOfDWordLength(Arr2, 15);
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'Allocation_15 should succeed.');
    for i := 0 to DynOfDWordLength(Arr2) - 1 do
      Arr2.Content^[i] := 1234 + i * 10;
    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'Second allocation Result is overwritten.');

    AllocationResult := ConcatDynArraysOfDWord(Arr1, Arr2);

    ExpectDWord(Byte(AllocationResult)).ToBe(Byte(True), 'Concat Result is overwritten or memory is full.');
    ExpectBoolean(AllocationResult).ToBe(True, '');
    ExpectDWord(Arr1.Len).ToBe(35, '');

    for i := 0 to 20 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr1.Content^[i]).ToBe(DWord(1234 + i * 10), '');

    for i := 20 to 35 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr1.Content^[i]).ToBe(DWord(1234 + (i - 20) * 10), '');
  //finally
    FreeDynArrayOfDWord(Arr1);
    FreeDynArrayOfDWord(Arr2);
  //end;
end;


procedure TTestDynArraysOfDWordCase_TestConcatDynArray_WithEmpty;
var
  Arr1, Arr2: TDynArrayOfDWord;
  AllocationResult: Boolean;
  i: Integer;
begin
  InitDynArrayOfDWordToEmpty(Arr1);
  InitDynArrayOfDWordToEmpty(Arr2);

  //try
    AllocationResult := SetDynOfDWordLength(Arr1, 20);
    for i := 0 to DynOfDWordLength(Arr1) - 1 do
      Arr1.Content^[i] := i * 10;

    AllocationResult := ConcatDynArraysOfDWord(Arr1, Arr2);
    ExpectBoolean(AllocationResult).ToBe(True, '');
    ExpectDWord(Arr1.Len).ToBe(20, '');

    for i := 0 to 20 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr1.Content^[i]).ToBe(DWord(i * 10), '');
  //finally
    FreeDynArrayOfDWord(Arr1);
    FreeDynArrayOfDWord(Arr2);
  //end;
end;


procedure TTestDynArraysOfDWordCase_TestConcatEmptyDynArray_WithValid;
var
  Arr1, Arr2: TDynArrayOfDWord;
  AllocationResult: Boolean;
  i: Integer;
begin
  InitDynArrayOfDWordToEmpty(Arr1);
  InitDynArrayOfDWordToEmpty(Arr2);

  //try
    AllocationResult := SetDynOfDWordLength(Arr2, 15);
    for i := 0 to DynOfDWordLength(Arr2) - 1 do
      Arr2.Content^[i] := i * 10;

    AllocationResult := ConcatDynArraysOfDWord(Arr1, Arr2);
    ExpectBoolean(AllocationResult).ToBe(True, '');
    ExpectDWord(Arr1.Len).ToBe(15, '');

    for i := 0 to 15 - 1 do  //test up to the old length, as this content has to be valid only
      ExpectDWord(Arr1.Content^[i]).ToBe(DWord(i * 10), '');
  //finally
    FreeDynArrayOfDWord(Arr1);
    FreeDynArrayOfDWord(Arr2);
  //end;
end;


procedure TTestDynArraysOfDWordCase_TestConcatEmptyDynArray_WithEmpty;
var
  Arr1, Arr2: TDynArrayOfDWord;
  AllocationResult: Boolean;
begin
  InitDynArrayOfDWordToEmpty(Arr1);
  InitDynArrayOfDWordToEmpty(Arr2);

  //try
    AllocationResult := ConcatDynArraysOfDWord(Arr1, Arr2);
    ExpectBoolean(AllocationResult).ToBe(True, '');
    ExpectDWord(Arr1.Len).ToBe(0, '');
  //finally
    FreeDynArrayOfDWord(Arr1);
    FreeDynArrayOfDWord(Arr2);
  //end;
end;


procedure TTestDynArraysOfDWordCase_Test_CallDynLength_WithoutInitDynArray;
var
  Arr: TDynArrayOfDWord;
begin
  //try
  //  DynOfDWordLength(Arr);
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe(CUninitializedDynArrayErrMsg);
  //end;
end;


procedure TTestDynArraysOfDWordCase_Test_CallSetDynLength_WithoutInitDynArray;
var
  Arr: TDynArrayOfDWord;
begin
  //try
  //  SetDynOfDWordLength(Arr, 3);
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe(CUninitializedDynArrayErrMsg);
  //end;
end;


procedure TTestDynArraysOfDWordCase_Test_CallConcatDynArrays_WithoutFirstInitDynArray;
var
  Arr1, Arr2: TDynArrayOfDWord;
begin
  InitDynArrayOfDWordToEmpty(Arr2);
  SetDynOfDWordLength(Arr2, 3);

  //try
  //  ConcatDynArraysOfDWord(Arr1, Arr2);
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe(CUninitializedDynArrayErrMsg);
  //end;

  FreeDynArrayOfDWord(Arr2);
end;


procedure TTestDynArraysOfDWordCase_Test_CallConcatDynArrays_WithoutSecondInitDynArray;
var
  Arr1, Arr2: TDynArrayOfDWord;
begin
  InitDynArrayOfDWordToEmpty(Arr1);
  SetDynOfDWordLength(Arr1, 3);

  //try
  //  ConcatDynArraysOfDWord(Arr1, Arr2);
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe(CUninitializedDynArrayErrMsg);
  //end;

  FreeDynArrayOfDWord(Arr1);
end;


procedure TTestDynArraysOfDWordCase_TestDeleteFirstDWords_ZeroLength;
var
  Arr: TDynArrayOfDWord;
begin
  InitDynArrayOfDWordToEmpty(Arr);
  SetDynOfDWordLength(Arr, 3);
  Arr.Content^[0] := 30;
  Arr.Content^[1] := 40;
  Arr.Content^[2] := 50;

  RemoveStartDWordsFromDynArray(0, Arr);

  ExpectDWord(Arr.Len).ToBe(3, '');
  ExpectDWord(Arr.Content^[0]).ToBe(30, '');
  ExpectDWord(Arr.Content^[1]).ToBe(40, '');
  ExpectDWord(Arr.Content^[2]).ToBe(50, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestDeleteFirstDWords_LessThanLength;
var
  Arr: TDynArrayOfDWord;
begin
  InitDynArrayOfDWordToEmpty(Arr);
  SetDynOfDWordLength(Arr, 3);
  Arr.Content^[0] := 30;
  Arr.Content^[1] := 40;
  Arr.Content^[2] := 50;

  RemoveStartDWordsFromDynArray(2, Arr);

  ExpectDWord(Arr.Len).ToBe(1, '');
  ExpectDWord(Arr.Content^[0]).ToBe(50, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestDeleteFirstDWords_LessThanLength_MoreItems;
var
  Arr: TDynArrayOfDWord;
begin
  InitDynArrayOfDWordToEmpty(Arr);
  SetDynOfDWordLength(Arr, 8);
  Arr.Content^[0] := 2030;
  Arr.Content^[1] := 2040;
  Arr.Content^[2] := 2050;
  Arr.Content^[3] := 2060;
  Arr.Content^[4] := 2070;
  Arr.Content^[5] := 2080;
  Arr.Content^[6] := 2090;
  Arr.Content^[7] := 20100;

  RemoveStartDWordsFromDynArray(2, Arr);

  ExpectDWord(Arr.Len).ToBe(6, '');
  ExpectDWord(Arr.Content^[0]).ToBe(2050, '');
  ExpectDWord(Arr.Content^[1]).ToBe(2060, '');
  ExpectDWord(Arr.Content^[2]).ToBe(2070, '');
  ExpectDWord(Arr.Content^[3]).ToBe(2080, '');
  ExpectDWord(Arr.Content^[4]).ToBe(2090, '');
  ExpectDWord(Arr.Content^[5]).ToBe(20100, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestDeleteFirstDWords_SameAsLength;
var
  Arr: TDynArrayOfDWord;
begin
  InitDynArrayOfDWordToEmpty(Arr);
  SetDynOfDWordLength(Arr, 3);
  Arr.Content^[0] := 30;
  Arr.Content^[1] := 40;
  Arr.Content^[2] := 50;

  RemoveStartDWordsFromDynArray(3, Arr);

  ExpectDWord(Arr.Len).ToBe(0, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestDeleteFirstDWords_GreaterThanLength;
var
  Arr: TDynArrayOfDWord;
begin
  InitDynArrayOfDWordToEmpty(Arr);
  SetDynOfDWordLength(Arr, 3);
  RemoveStartDWordsFromDynArray(7, Arr);

  ExpectDWord(Arr.Len).ToBe(0, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestCopyFromDynArray_HappyFlow;
var
  Src, Dest: TDynArrayOfDWord;
  s: string[30];
  {$IFDEF AppArch16} Dummy: TDynArrayLength; {$ENDIF}
begin
  InitDynArrayOfDWordToEmpty(Src);
  ExpectBoolean(StringToDynArrayOfDWord('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef', Src)).ToBe(True, '');
  CopyFromDynArrayOfDWord(Dest, Src, {$IFDEF AppArch16} Dummy, {$ENDIF} 3, 7);

  DynArrayOfDWordToString(Dest, s);
  ExpectString(s).ToBe('CDEFGHIJKLMNOPQRSTUVWXYZabcd', '');
  FreeDynArrayOfDWord(Src);
  FreeDynArrayOfDWord(Dest);
end;


procedure TTestDynArraysOfDWordCase_TestCopyFromDynArray_0Length;
var
  Src, Dest: TDynArrayOfDWord;
  s: string[30];
  {$IFDEF AppArch16} Dummy: TDynArrayLength; {$ENDIF}
begin
  InitDynArrayOfDWordToEmpty(Src);
  ExpectBoolean(StringToDynArrayOfDWord('0123456789ABCDEF', Src)).ToBe(True, '');
  CopyFromDynArrayOfDWord(Dest, Src, {$IFDEF AppArch16} Dummy, {$ENDIF} 3, 0);

  DynArrayOfDWordToString(Dest, s);
  ExpectString(s).ToBe('', '');
  FreeDynArrayOfDWord(Src);
  FreeDynArrayOfDWord(Dest);
end;


procedure TTestDynArraysOfDWordCase_TestCopyFromDynArray_PartialOutOfContent;
var
  Src, Dest: TDynArrayOfDWord;
  s: string[30];
  {$IFDEF AppArch16} Dummy: TDynArrayLength; {$ENDIF}
begin
  //  0123 4567 89AB CDEF GHIJ KLMN OPQR STUV WXYZ abcd efgh ijkl mno
  InitDynArrayOfDWordToEmpty(Src);
  ExpectBoolean(StringToDynArrayOfDWord('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmno', Src)).ToBe(True, '');
  ExpectDWord(Src.Len).ToBe(13, 'src len');
  ExpectDWord(Src.Content^[12]).ToBe(Ord('m') shl 0 + Ord('n') shl 8 + Ord('o') shl 16 + 0 shl 24, 'src content');  //6F6E6D (onm)

  CopyFromDynArrayOfDWord(Dest, Src, {$IFDEF AppArch16} Dummy, {$ENDIF} 5, 20);
  ExpectDWord(Dest.Len).ToBe(8, ''); //  CopyFromDynArrayOfDWord doesn't care about the content.

  DynArrayOfDWordToString(Dest, s);
  ExpectString(s).ToBe('KLMNOPQRSTUVWXYZabcdefghijklmno', '');
  FreeDynArrayOfDWord(Src);
  FreeDynArrayOfDWord(Dest);
end;


procedure TTestDynArraysOfDWordCase_TestCopyFromDynArray_PartialOutOfContent2;
var
  Src, Dest: TDynArrayOfDWord;
  s: string[30];
  {$IFDEF AppArch16} Dummy: TDynArrayLength; {$ENDIF}
begin
  //  0123 4567 89AB CDEF GHIJ KLMN OPQR STUV WXYZ abcd efgh ijkl m
  InitDynArrayOfDWordToEmpty(Src);
  ExpectBoolean(StringToDynArrayOfDWord('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm', Src)).ToBe(True, '');
  ExpectDWord(Src.Len).ToBe(13, 'src len');
  ExpectDWord(Src.Content^[12]).ToBe(Ord('m') shl 0 + 0 shl 8 + 0 shl 16 + 0 shl 24, 'src content');  //00006D (onm)

  CopyFromDynArrayOfDWord(Dest, Src, {$IFDEF AppArch16} Dummy, {$ENDIF} 5, 20);
  ExpectDWord(Dest.Len).ToBe(8, ''); //  CopyFromDynArrayOfDWord doesn't care about the content.

  DynArrayOfDWordToString(Dest, s);
  ExpectString(s).ToBe('KLMNOPQRSTUVWXYZabcdefghijklm', '');
  
  FreeDynArrayOfDWord(Src);
  FreeDynArrayOfDWord(Dest);
end;


procedure TTestDynArraysOfDWordCase_TestCopyFromDynArray_CompletelyOutOfContent;
var
  Src, Dest: TDynArrayOfDWord;
  s: string[30];
  {$IFDEF AppArch16} Dummy: TDynArrayLength; {$ENDIF}
begin
  InitDynArrayOfDWordToEmpty(Src);
  ExpectBoolean(StringToDynArrayOfDWord('0123456789ABCDEF', Src)).ToBe(True, '');
  CopyFromDynArrayOfDWord(Dest, Src, {$IFDEF AppArch16} Dummy, {$ENDIF} 50, 20);

  DynArrayOfDWordToString(Dest, s);
  ExpectString(s).ToBe('', '');
  FreeDynArrayOfDWord(Src);
  FreeDynArrayOfDWord(Dest);
end;


procedure TTestDynArraysOfDWordCase_TestCopyFromDynArray_EmptySource;
var
  Src, Dest: TDynArrayOfDWord;
  s: string[30];
  {$IFDEF AppArch16} Dummy: TDynArrayLength; {$ENDIF}
begin
  InitDynArrayOfDWordToEmpty(Src);
  CopyFromDynArrayOfDWord(Dest, Src, {$IFDEF AppArch16} Dummy, {$ENDIF} 0, 20);

  DynArrayOfDWordToString(Dest, s);
  ExpectString(s).ToBe('', '');
  FreeDynArrayOfDWord(Src);
  FreeDynArrayOfDWord(Dest);
end;


procedure TTestDynArraysOfDWordCase_TestDeleteFromDynArray_EmptyArray;
var
  Arr: TDynArrayOfDWord;
begin
  InitDynArrayOfDWordToEmpty(Arr);
  DeleteItemFromDynArrayOfDWord(Arr, 0);
  ExpectDWord(Arr.Len).ToBe(0, '');
  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestDeleteFromDynArray_IndexOutOfBounds;
var
  Arr: TDynArrayOfDWord;
  //FoundException: Boolean;
begin
  //FoundException := False;
  InitDynArrayOfDWordToEmpty(Arr);
  //try
    SetDynOfDWordLength(Arr, 3);
    ExpectBoolean(DeleteItemFromDynArrayOfDWord(Arr, 3)).ToBe(False, '');
  //except
  //  on E: Exception do
  //  begin
  //    FoundException := True;
  //    Expect(E.Message).ToBe('Delete index out of bounds in DeleteItemFromDynArrayOfDWord.');
  //  end;
  //end;

  //Expect(FoundException).ToBe(True);
  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestDeleteFromDynArray_HappyFlow1;
var
  Arr: TDynArrayOfDWord;
  i: Integer;
begin
  InitDynArrayOfDWordToEmpty(Arr);

  SetDynOfDWordLength(Arr, 7);
  for i := 0 to Arr.Len - 1 do
    Arr.Content^[i] := i + 20;

  DeleteItemFromDynArrayOfDWord(Arr, 3);

  ExpectDWord(Arr.Len).ToBe(6, '');

  for i := 0 to 2 do
    ExpectDWord(Arr.Content^[i]).ToBe(i + 20, '');

  for i := 3 to Arr.Len - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i + 20 + 1, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestDeleteFromDynArray_HappyFlow2;
var
  Arr: TDynArrayOfDWord;
  i: Integer;
begin
  InitDynArrayOfDWordToEmpty(Arr);

  SetDynOfDWordLength(Arr, 7);
  for i := 0 to Arr.Len - 1 do
    Arr.Content^[i] := i + 20;

  DeleteItemFromDynArrayOfDWord(Arr, 0);

  ExpectDWord(Arr.Len).ToBe(6, '');

  for i := 0 to Arr.Len - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i + 20 + 1, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestCreateUniqueDWord_HappyFlow1;
var
  Arr: TDynArrayOfDWord;
begin
  InitDynArrayOfDWordToEmpty(Arr);

  //SetDynOfDWordLength(Arr, 0);
  ExpectDWord(CreateUniqueDWord(Arr)).ToBe(0, '');
  ExpectDWord(Arr.Len).ToBe(1, '');
  ExpectDWord(Arr.Content^[0]).ToBe(0, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestCreateUniqueDWord_HappyFlow2;
var
  Arr: TDynArrayOfDWord;
begin
  InitDynArrayOfDWordToEmpty(Arr);

  SetDynOfDWordLength(Arr, 1);
  Arr.Content^[0] := 0;
  ExpectDWord(CreateUniqueDWord(Arr)).ToBe(1, '');
  ExpectDWord(Arr.Len).ToBe(2, '');
  ExpectDWord(Arr.Content^[0]).ToBe(0, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestCreateUniqueDWord_HappyFlow3;
var
  Arr: TDynArrayOfDWord;
begin
  InitDynArrayOfDWordToEmpty(Arr);

  SetDynOfDWordLength(Arr, 2);
  Arr.Content^[0] := 0;
  Arr.Content^[1] := 2;
  ExpectDWord(CreateUniqueDWord(Arr)).ToBe(3, '');
  ExpectDWord(Arr.Len).ToBe(3, '');

  ExpectDWord(Arr.Content^[0]).ToBe(0, '');
  ExpectDWord(Arr.Content^[1]).ToBe(2, '');
  ExpectDWord(Arr.Content^[2]).ToBe(3, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestCreateUniqueDWord_HappyFlow4;
var
  Arr: TDynArrayOfDWord;
begin
  InitDynArrayOfDWordToEmpty(Arr);

  SetDynOfDWordLength(Arr, 3);
  Arr.Content^[0] := 0;
  Arr.Content^[1] := 2;
  Arr.Content^[2] := 3;
  ExpectDWord(CreateUniqueDWord(Arr)).ToBe(4, '');
  ExpectDWord(Arr.Len).ToBe(4, '');

  ExpectDWord(Arr.Content^[0]).ToBe(0, '');
  ExpectDWord(Arr.Content^[1]).ToBe(2, '');
  ExpectDWord(Arr.Content^[2]).ToBe(3, '');
  ExpectDWord(Arr.Content^[3]).ToBe(4, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestCreateUniqueDWord_HappyFlow5;
var
  Arr: TDynArrayOfDWord;
  i: LongInt;
begin
  {$IFDEF P32}
    {$IFDEF PIC32MX} //defined in .pld file for PIC32MX only
      if BMXDRMSZ <= 131072 then //At least 128K is required for the tested array only.
      begin
        UART_WriteLn_Text('Test skipped because of low RAM.');
        Exit;
      end;
    {$ENDIF}
  {$ENDIF}

  //{$IFDEF dsPIC}
    UART_WriteLn_Text('Test skipped because of low RAM.');
    Exit;
  //{$ENDIF}
  
  InitDynArrayOfDWordToEmpty(Arr);

  ExpectBoolean(SetDynOfDWordLength(Arr, 65534)).ToBe(True, 'Increase MaxMM value in case of an error.');
  for i := 0 to 65534 - 1 do
    Arr.Content^[i] := i;

  ExpectDWord(CreateUniqueDWord(Arr)).ToBe(65534, 'created item');
  ExpectDWord(Arr.Len).ToBe(65535, '');

  for i := 0 to 65534 - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestCreateUniqueDWord_HappyFlow6;  //the search wraps around to find a free number
var
  Arr: TDynArrayOfDWord;
  i: LongInt;
begin
  {$IFDEF P32}
    {$IFDEF PIC32MX} //defined in .pld file for PIC32MX only
      if BMXDRMSZ <= 131072 then //At least 128K is required for the tested array only.
      begin
        UART_WriteLn_Text('Test skipped because of low RAM.');
        Exit;
      end;
    {$ENDIF}
  {$ENDIF}

  //{$IFDEF dsPIC}
    UART_WriteLn_Text('Test skipped because of low RAM.');
    Exit;
  //{$ENDIF}
  
  InitDynArrayOfDWordToEmpty(Arr);

  ExpectBoolean(SetDynOfDWordLength(Arr, 65534)).ToBe(True, '');
  for i := 0 to 10 - 1 do
    Arr.Content^[i] := i;

  for i := 10 to 65534 - 1 do
    Arr.Content^[i] := (i + 1) and $FFFF;

  ExpectDWord(CreateUniqueDWord(Arr)).ToBe(10, 'created item');
  ExpectDWord(Arr.Len).ToBe(65535, '');

  for i := 0 to 10 - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i, '');

  for i := 10 to 65534 - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i + 1, '');

  //ToDo: replace with pointer:   something like @Arr.Content^[0] + 65534 shl 2
  //ExpectDWord(Arr.Content^[65534]).ToBe(10, 'content');   //It seems that arrays of DWord cannot be indexed past 255.  (i.e. Arr.Content^[256] results in error)

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestCreateUniqueDWord_FullArray1;
var
  Arr: TDynArrayOfDWord;
  i: LongInt;
begin
  {$IFDEF P32}
    {$IFDEF PIC32MX} //defined in .pld file for PIC32MX only
      if BMXDRMSZ <= 131072 then //At least 128K is required for the tested array only.
      begin
        UART_WriteLn_Text('Test skipped because of low RAM.');
        Exit;
      end;
    {$ENDIF}
  {$ENDIF}

  //{$IFDEF dsPIC}
    UART_WriteLn_Text('Test skipped because of low RAM.');
    Exit;
  //{$ENDIF}
  
  InitDynArrayOfDWordToEmpty(Arr);

  ExpectBoolean(SetDynOfDWordLength(Arr, 65535)).ToBe(True, '');
  for i := 0 to Arr.Len - 1 do
    Arr.Content^[i] := i;

  ExpectDWord(CreateUniqueDWord(Arr)).ToBe(65535, ''); //65535 is an error indicator, not a valid number
  ExpectDWord(Arr.Len).ToBe(65535, '');

  for i := 0 to Arr.Len - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestCreateUniqueDWord_FullArray2;
var
  Arr: TDynArrayOfDWord;
  i: LongInt;
begin
  {$IFDEF P32}
    {$IFDEF PIC32MX} //defined in .pld file for PIC32MX only
      if BMXDRMSZ <= 131072 then //At least 128K is required for the tested array only.
      begin
        UART_WriteLn_Text('Test skipped because of low RAM.');
        Exit;
      end;
    {$ENDIF}
  {$ENDIF}

  //{$IFDEF dsPIC}
    UART_WriteLn_Text('Test skipped because of low RAM.');
    Exit;
  //{$ENDIF}
  
  InitDynArrayOfDWordToEmpty(Arr);

  ExpectBoolean(SetDynOfDWordLength(Arr, 65535)).ToBe(True, '');
  for i := 0 to Arr.Len - 1 do
    Arr.Content^[i] := 0;

  ExpectDWord(CreateUniqueDWord(Arr)).ToBe(65535, ''); //65535 is an error indicator, not a valid number
  ExpectDWord(Arr.Len).ToBe(65535, '');

  for i := 0 to Arr.Len - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(0, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestCreateUniqueDWord_FullArray3;
var
  Arr: TDynArrayOfDWord;
  i: LongInt;
begin
  {$IFDEF P32}
    {$IFDEF PIC32MX} //defined in .pld file for PIC32MX only
      if BMXDRMSZ <= 131072 then //At least 128K is required for the tested array only.
      begin
        UART_WriteLn_Text('Test skipped because of low RAM.');
        Exit;
      end;
    {$ENDIF}
  {$ENDIF}

  //{$IFDEF dsPIC}
    UART_WriteLn_Text('Test skipped because of low RAM.');
    Exit;
  //{$ENDIF}
  
  InitDynArrayOfDWordToEmpty(Arr);

  ExpectBoolean(SetDynOfDWordLength(Arr, 65540)).ToBe(True, '');  //The array has more numbers than the max value CreateUniqueDWord can create.
  for i := 0 to Arr.Len - 1 do
    Arr.Content^[i] := i;   //this is different than array of Word, because the array of DWord can store items, with values greater than 65535

  ExpectDWord(CreateUniqueDWord(Arr)).ToBe(65535, ''); //65535 is an error indicator, not a valid number
  ExpectDWord(Arr.Len).ToBe(65540, '');

  for i := 0 to Arr.Len - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(i {and $FFFF}, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestCreateUniqueDWord_FullArray4;
var
  Arr: TDynArrayOfDWord;
  i: LongInt;
begin
  {$IFDEF P32}
    {$IFDEF PIC32MX} //defined in .pld file for PIC32MX only
      if BMXDRMSZ <= 131072 then //At least 128K is required for the tested array only.
      begin
        UART_WriteLn_Text('Test skipped because of low RAM.');
        Exit;
      end;
    {$ENDIF}
  {$ENDIF}

  //{$IFDEF dsPIC}
    UART_WriteLn_Text('Test skipped because of low RAM.');
    Exit;
  //{$ENDIF}
  
  InitDynArrayOfDWordToEmpty(Arr);

  ExpectBoolean(SetDynOfDWordLength(Arr, 65540)).ToBe(True, ''); //The array has more numbers than the max value CreateUniqueDWord can create.
  for i := 0 to Arr.Len - 1 do
    Arr.Content^[i] := 3;

  ExpectDWord(CreateUniqueDWord(Arr)).ToBe(65535, ''); //65535 is an error indicator, not a valid number
  ExpectDWord(Arr.Len).ToBe(65540, '');

  for i := 0 to Arr.Len - 1 do
    ExpectDWord(Arr.Content^[i]).ToBe(3, '');

  FreeDynArrayOfDWord(Arr);
end;


procedure TTestDynArraysOfDWordCase_TestDoubleFree;
var
  Arr: TDynArrayOfDWord;
begin
  InitDynArrayOfDWordToEmpty(Arr);
  SetDynOfDWordLength(Arr, 3);

  FreeDynArrayOfDWord(Arr);
  ExpectDWord(Arr.Len).ToBe(0, '');
  ExpectDWord(Arr.Content).ToBe(nil, '');

  //try                            //Free again. The structure should stay the same. No exception is expected.
    FreeDynArrayOfDWord(Arr);
    ExpectDWord(Arr.Len).ToBe(0, '');
    ExpectDWord(Arr.Content).ToBe(nil, '');
  //except
  //  on E: Exception do
  //    Expect(E.Message).ToBe('No exception is expected!');
  //end;
end;


//==============================================================================

procedure RegisterTest_TTestDynArraysOfDWordCase(var ATestName: string; ATestProc: PTestProc);
begin
  if TestDynArraysOfDWordCase.TestCount >= CMaxTestCountPerSuite then
  begin
    UART_WriteLn_Text('Error_Cannot register more tests to TTestDynArraysOfDWordCase.');
    Exit;
  end;

  if Length(ATestName) > CMaxTestNameLength then
  begin
    UART_WriteLn_Text('Error_Cannot register test with long name to TTestDynArraysOfDWordCase.');
    UART_WriteLn_Text('Error_LongTestName:');
    UART_WriteLn_Text(ATestName);
    Exit;
  end;

  TestDynArraysOfDWordCase.Tests[TestDynArraysOfDWordCase.TestCount].Name := ATestName;
  TestDynArraysOfDWordCase.Tests[TestDynArraysOfDWordCase.TestCount].TestProc := ATestProc;
  Inc(TestDynArraysOfDWordCase.TestCount);
end;


procedure RegisterTTestDynArraysOfDWordCaseProcs;
begin
  TestDynArraysOfDWordCase.TestCount := 0;
  TestDynArraysOfDWordCase.SetUp := @TTestDynArraysOfDWordCase_SetUp;
  TestDynArraysOfDWordCase.TearDown := @TTestDynArraysOfDWordCase_TearDown;

  RegisterTest_TTestDynArraysOfDWordCase('TestSimpleAllocation', @TTestDynArraysOfDWordCase_TestSimpleAllocation);
  RegisterTest_TTestDynArraysOfDWordCase('TestWritingToArray', @TTestDynArraysOfDWordCase_TestWritingToArray);
  RegisterTest_TTestDynArraysOfDWordCase('TestReallocationToLargerArray', @TTestDynArraysOfDWordCase_TestReallocationToLargerArray);
  RegisterTest_TTestDynArraysOfDWordCase('TestReallocationToSmallerArray', @TTestDynArraysOfDWordCase_TestReallocationToSmallerArray);
  RegisterTest_TTestDynArraysOfDWordCase('TestConcatDynArrays_HappyFlow', @TTestDynArraysOfDWordCase_TestConcatDynArrays_HappyFlow);
  RegisterTest_TTestDynArraysOfDWordCase('TestConcatDynArray_WithEmpty', @TTestDynArraysOfDWordCase_TestConcatDynArray_WithEmpty);
  RegisterTest_TTestDynArraysOfDWordCase('TestConcatEmptyDynArray_WithValid', @TTestDynArraysOfDWordCase_TestConcatEmptyDynArray_WithValid);
  RegisterTest_TTestDynArraysOfDWordCase('TestConcatEmptyDynArray_WithEmpty', @TTestDynArraysOfDWordCase_TestConcatEmptyDynArray_WithEmpty);
  RegisterTest_TTestDynArraysOfDWordCase('Test_CallDynLength_WithoutInitDynArray', @TTestDynArraysOfDWordCase_Test_CallDynLength_WithoutInitDynArray);
  RegisterTest_TTestDynArraysOfDWordCase('Test_CallSetDynLength_WithoutInitDynArray', @TTestDynArraysOfDWordCase_Test_CallSetDynLength_WithoutInitDynArray);
  RegisterTest_TTestDynArraysOfDWordCase('Test_CallConcatDynArrays_WithoutFirstInitDynArray', @TTestDynArraysOfDWordCase_Test_CallConcatDynArrays_WithoutFirstInitDynArray);
  RegisterTest_TTestDynArraysOfDWordCase('Test_CallConcatDynArrays_WithoutSecondInitDynArray', @TTestDynArraysOfDWordCase_Test_CallConcatDynArrays_WithoutSecondInitDynArray);
  RegisterTest_TTestDynArraysOfDWordCase('TestDeleteFirstDWords_ZeroLength', @TTestDynArraysOfDWordCase_TestDeleteFirstDWords_ZeroLength);
  RegisterTest_TTestDynArraysOfDWordCase('TestDeleteFirstDWords_LessThanLength', @TTestDynArraysOfDWordCase_TestDeleteFirstDWords_LessThanLength);
  RegisterTest_TTestDynArraysOfDWordCase('TestDeleteFirstDWords_LessThanLength_MoreItems', @TTestDynArraysOfDWordCase_TestDeleteFirstDWords_LessThanLength_MoreItems);
  RegisterTest_TTestDynArraysOfDWordCase('TestDeleteFirstDWords_SameAsLength', @TTestDynArraysOfDWordCase_TestDeleteFirstDWords_SameAsLength);
  RegisterTest_TTestDynArraysOfDWordCase('TestDeleteFirstDWords_GreaterThanLength', @TTestDynArraysOfDWordCase_TestDeleteFirstDWords_GreaterThanLength);
  RegisterTest_TTestDynArraysOfDWordCase('TestCopyFromDynArray_HappyFlow', @TTestDynArraysOfDWordCase_TestCopyFromDynArray_HappyFlow);
  RegisterTest_TTestDynArraysOfDWordCase('TestCopyFromDynArray_0Length', @TTestDynArraysOfDWordCase_TestCopyFromDynArray_0Length);
  RegisterTest_TTestDynArraysOfDWordCase('TestCopyFromDynArray_PartialOutOfContent', @TTestDynArraysOfDWordCase_TestCopyFromDynArray_PartialOutOfContent);
  RegisterTest_TTestDynArraysOfDWordCase('TestCopyFromDynArray_PartialOutOfContent2', @TTestDynArraysOfDWordCase_TestCopyFromDynArray_PartialOutOfContent2);
  RegisterTest_TTestDynArraysOfDWordCase('TestCopyFromDynArray_CompletelyOutOfContent', @TTestDynArraysOfDWordCase_TestCopyFromDynArray_CompletelyOutOfContent);
  RegisterTest_TTestDynArraysOfDWordCase('TestCopyFromDynArray_EmptySource', @TTestDynArraysOfDWordCase_TestCopyFromDynArray_EmptySource);
  RegisterTest_TTestDynArraysOfDWordCase('TestDeleteFromDynArray_EmptyArray', @TTestDynArraysOfDWordCase_TestDeleteFromDynArray_EmptyArray);
  RegisterTest_TTestDynArraysOfDWordCase('TestDeleteFromDynArray_IndexOutOfBounds', @TTestDynArraysOfDWordCase_TestDeleteFromDynArray_IndexOutOfBounds);
  RegisterTest_TTestDynArraysOfDWordCase('TestDeleteFromDynArray_HappyFlow1', @TTestDynArraysOfDWordCase_TestDeleteFromDynArray_HappyFlow1);
  RegisterTest_TTestDynArraysOfDWordCase('TestDeleteFromDynArray_HappyFlow2', @TTestDynArraysOfDWordCase_TestDeleteFromDynArray_HappyFlow2);
  RegisterTest_TTestDynArraysOfDWordCase('TestCreateUniqueDWord_HappyFlow1', @TTestDynArraysOfDWordCase_TestCreateUniqueDWord_HappyFlow1);
  RegisterTest_TTestDynArraysOfDWordCase('TestCreateUniqueDWord_HappyFlow2', @TTestDynArraysOfDWordCase_TestCreateUniqueDWord_HappyFlow2);
  RegisterTest_TTestDynArraysOfDWordCase('TestCreateUniqueDWord_HappyFlow3', @TTestDynArraysOfDWordCase_TestCreateUniqueDWord_HappyFlow3);
  RegisterTest_TTestDynArraysOfDWordCase('TestCreateUniqueDWord_HappyFlow4', @TTestDynArraysOfDWordCase_TestCreateUniqueDWord_HappyFlow4);
  RegisterTest_TTestDynArraysOfDWordCase('TestCreateUniqueDWord_HappyFlow5', @TTestDynArraysOfDWordCase_TestCreateUniqueDWord_HappyFlow5);
  RegisterTest_TTestDynArraysOfDWordCase('TestCreateUniqueDWord_HappyFlow6', @TTestDynArraysOfDWordCase_TestCreateUniqueDWord_HappyFlow6);
  RegisterTest_TTestDynArraysOfDWordCase('TestCreateUniqueDWord_FullArray1', @TTestDynArraysOfDWordCase_TestCreateUniqueDWord_FullArray1);
  RegisterTest_TTestDynArraysOfDWordCase('TestCreateUniqueDWord_FullArray2', @TTestDynArraysOfDWordCase_TestCreateUniqueDWord_FullArray2);
  RegisterTest_TTestDynArraysOfDWordCase('TestCreateUniqueDWord_FullArray3', @TTestDynArraysOfDWordCase_TestCreateUniqueDWord_FullArray3);
  RegisterTest_TTestDynArraysOfDWordCase('TestCreateUniqueDWord_FullArray4', @TTestDynArraysOfDWordCase_TestCreateUniqueDWord_FullArray4);
  RegisterTest_TTestDynArraysOfDWordCase('TestDoubleFree', @TTestDynArraysOfDWordCase_TestDoubleFree);
end;

end.